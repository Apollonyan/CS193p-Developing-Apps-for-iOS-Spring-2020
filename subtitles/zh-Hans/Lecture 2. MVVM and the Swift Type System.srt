1
00:00:00,000 --> 00:00:03,250
本字幕由志愿者义务贡献，采用许可协议
知识共享 署名—非商业性使用—相同方式共享 3.0 美国

2
00:00:04,930 --> 00:00:06,630
>> [旁白] 斯坦福大学

3
00:00:08,280 --> 00:00:10,560
>> 大家好，欢迎回到第二节

4
00:00:10,560 --> 00:00:15,452
2020 年春季学期
斯坦福 CS193p 公开课

5
00:00:15,452 --> 00:00:17,640
这节课我会继续完成

6
00:00:17,640 --> 00:00:19,250
第一节课所做的演示

7
00:00:19,250 --> 00:00:22,070
不过首先我想先讲一讲

8
00:00:22,070 --> 00:00:24,810
这两个非常重要的概念

9
00:00:24,810 --> 00:00:26,840
第一个是 MVVM

10
00:00:26,840 --> 00:00:29,430
这是我们将要使用的设计范式

11
00:00:29,430 --> 00:00:33,220
用它来组织我们的代码

12
00:00:33,220 --> 00:00:34,550
然后第二个概念

13
00:00:34,550 --> 00:00:37,630
是 Swift 中的类型系统

14
00:00:37,630 --> 00:00:40,370
我们先来看 MVVM

15
00:00:40,370 --> 00:00:44,270
MVVM 是一种代码组织模式

16
00:00:44,270 --> 00:00:46,400
简单地说，就是如何决定你的

17
00:00:46,400 --> 00:00:48,810
每一段代码应该放在项目的什么位置

18
00:00:48,810 --> 00:00:50,890
并且能很好地支持

19
00:00:50,890 --> 00:00:55,460
我上节课提到的响应式用户界面

20
00:00:55,460 --> 00:00:59,700
要想 SwiftUI 正常工作
就必须要遵循 MVVM 设计范式

21
00:00:59,700 --> 00:01:02,250
没有它就没办法写 SwiftUI

22
00:01:02,250 --> 00:01:04,590
对于看过前几年的这门课的同学来说

23
00:01:04,590 --> 00:01:08,510
你们会发现它和 MVC 不同

24
00:01:08,510 --> 00:01:12,150
MVC 指的是 Model-View-Controller
（模型—视图—控制器），适用于 UIKit

25
00:01:12,150 --> 00:01:16,463
之前的 iOS 开发机制会用到它

26
00:01:17,810 --> 00:01:22,520
MVVM 和 MVC 有一些相通之处

27
00:01:22,520 --> 00:01:25,750
我们都要把模型（Model）拆分出来

28
00:01:25,750 --> 00:01:27,607
把它作为 app 的后端，对吧？

29
00:01:27,607 --> 00:01:30,270
它是与 UI 完全不相关的部分

30
00:01:30,270 --> 00:01:32,310
而视图（View）则是面向用户的界面

31
00:01:32,310 --> 00:01:34,380
我们先来讲一下模型和视图

32
00:01:34,380 --> 00:01:38,393
然后再来讲 MVVM
是如何把它们组合在一起的

33
00:01:39,490 --> 00:01:42,840
模型是独立于 UI 的

34
00:01:42,840 --> 00:01:46,720
例如它是不会导入 SwiftUI 的

35
00:01:46,720 --> 00:01:50,580
模型会封装应用程序中的

36
00:01:50,580 --> 00:01:53,280
数据和逻辑

37
00:01:53,280 --> 00:01:55,870
具体到我们的卡片配对游戏上来说

38
00:01:55,870 --> 00:01:59,200
模型包含卡片（数据）

39
00:01:59,200 --> 00:02:02,840
和内在的逻辑，例如当我选中一张
卡片的时候应该发生什么

40
00:02:02,840 --> 00:02:06,650
我该如何配对，当我配成一对之后
应该得到多少分

41
00:02:06,650 --> 00:02:08,400
配对失败会发生什么

42
00:02:08,400 --> 00:02:12,773
所有这些逻辑和卡片数据
都保存在模型里

43
00:02:14,180 --> 00:02:16,870
模型就是事实

44
00:02:16,870 --> 00:02:19,340
对于所有的数据和逻辑而言
这就是事实

45
00:02:19,340 --> 00:02:22,680
我们从不把数据存在其他地方

46
00:02:22,680 --> 00:02:24,610
让数据有两个版本

47
00:02:24,610 --> 00:02:27,923
我们一直都是从模型中获取事实

48
00:02:28,770 --> 00:02:31,730
而视图反映了模型

49
00:02:31,730 --> 00:02:35,410
数据永远是从模型流向视图的

50
00:02:35,410 --> 00:02:37,770
我们会让视图

51
00:02:37,770 --> 00:02:39,450
不管它如何绘制

52
00:02:39,450 --> 00:02:42,040
都应该反映模型中的内容

53
00:02:42,040 --> 00:02:46,090
所以不管卡片配对游戏
在屏幕上显示的是什么样子

54
00:02:46,090 --> 00:02:49,130
它永远反映模型中的

55
00:02:49,130 --> 00:02:50,110
游戏状态

56
00:02:50,110 --> 00:02:51,850
了解视图永远反映模型的数据

57
00:02:51,850 --> 00:02:54,410
是一件很重要的事情

58
00:02:54,410 --> 00:02:57,030
视图是不保存状态的

59
00:02:57,030 --> 00:03:00,510
因为所有的状态都保存在模型里

60
00:03:00,510 --> 00:03:03,660
所以视图本身不需要有任何状态

61
00:03:03,660 --> 00:03:05,580
视图实际上每时每刻

62
00:03:05,580 --> 00:03:08,110
都在获取模型中的状态

63
00:03:08,110 --> 00:03:10,420
然后显示它

64
00:03:10,420 --> 00:03:13,070
在任何时候

65
00:03:13,070 --> 00:03:15,393
视图都应该准确反映模型当前的状态

66
00:03:15,393 --> 00:03:18,650
这就是我们设计视图的思路

67
00:03:18,650 --> 00:03:22,870
所以我们的视图是声明式（declarative）的

68
00:03:22,870 --> 00:03:25,220
声明式的意思是我们只是声明

69
00:03:25,220 --> 00:03:26,950
视图长什么样子

70
00:03:26,950 --> 00:03:30,030
并且只有当模型改变的时候

71
00:03:30,030 --> 00:03:31,503
屏幕上的内容才会改变

72
00:03:32,703 --> 00:03:35,843
如果你看看我们上次写的代码

73
00:03:35,843 --> 00:03:39,300
会发现我们没有通过调用函数
向屏幕上添加内容

74
00:03:39,300 --> 00:03:44,300
我们只是创建了 RoundedRectangle
Text 和 HStack

75
00:03:44,560 --> 00:03:47,520
和 ZStack 之类的东西
我们仅仅创建了它们

76
00:03:47,520 --> 00:03:49,870
然后把它们放到 UI 中我们想要的位置

77
00:03:49,870 --> 00:03:54,100
代码中调用的唯一的函数

78
00:03:54,100 --> 00:03:57,750
是用来改变
这些东西外观的修饰符

79
00:03:57,750 --> 00:03:59,960
并且在原地就能看到效果

80
00:03:59,960 --> 00:04:02,760
所以我们昨天写的代码

81
00:04:02,760 --> 00:04:06,350
只是在声明用户界面看起来是什么样的

82
00:04:06,350 --> 00:04:11,300
它与之前 iOS 程序

83
00:04:11,300 --> 00:04:12,905
和很多其他已经存在很多年的系统

84
00:04:12,905 --> 00:04:14,090
的开发方法不同

85
00:04:14,090 --> 00:04:16,615
我们称那些为命令式（imperative）

86
00:04:16,615 --> 00:04:20,730
如果你按照命令式的模式来做用户界面

87
00:04:20,730 --> 00:04:24,530
或编写代码，命令式这个词

88
00:04:24,530 --> 00:04:27,620
和帝国（imperial）这个词同根，对吧？

89
00:04:27,620 --> 00:04:32,090
帝国就是皇帝统治的国家

90
00:04:32,090 --> 00:04:33,820
皇帝对所有人发号施令

91
00:04:33,820 --> 00:04:37,650
“你，来做这件事，建造这个
然后在这片地上种植”

92
00:04:37,650 --> 00:04:40,890
皇帝就像这样告诉别人要做什么

93
00:04:40,890 --> 00:04:43,640
这就是帝国的运作方式

94
00:04:43,640 --> 00:04:46,650
类比到做 UI 这件事来说

95
00:04:46,650 --> 00:04:48,570
你需要说“把按钮放到这”

96
00:04:48,570 --> 00:04:51,590
“把这些 UI 元素放在那儿”

97
00:04:51,590 --> 00:04:54,540
随着时间的推移
通过调用函数来做这些事情

98
00:04:54,540 --> 00:04:58,430
所以为什么命令式不适用于构建 UI？

99
00:04:58,430 --> 00:05:00,860
最主要的原因是构建 UI 与时间有关

100
00:05:00,860 --> 00:05:03,400
这些东西，这些函数是
随着时间的推移逐步调用的

101
00:05:03,400 --> 00:05:04,950
先放按钮到这里

102
00:05:04,950 --> 00:05:06,130
之后再来安排另一个地方

103
00:05:06,130 --> 00:05:08,140
然后其他事情再发生

104
00:05:08,140 --> 00:05:11,440
所以如果你想理解 UI 是如何被构建的

105
00:05:11,440 --> 00:05:14,610
你需要在时间维度上

106
00:05:14,610 --> 00:05:16,750
知道哪一个函数在什么时间被调用

107
00:05:16,750 --> 00:05:20,050
哪些函数在调用之前必须先调用其他函数

108
00:05:20,050 --> 00:05:23,100
一旦 UI 构建完成了

109
00:05:23,100 --> 00:05:25,790
在任何时候都可能
有人调用函数来改变 UI

110
00:05:25,790 --> 00:05:27,720
所以你必须时刻保持警惕

111
00:05:27,720 --> 00:05:28,850
并时刻准备着

112
00:05:28,850 --> 00:05:31,340
所以要管理这样的 UI 简直是一场噩梦

113
00:05:31,340 --> 00:05:35,260
而且几乎不可能证明
你的 UI 真的能正常工作

114
00:05:35,260 --> 00:05:37,690
因为你不可能把每一种调用函数的

115
00:05:37,690 --> 00:05:39,230
顺序都试一遍

116
00:05:39,230 --> 00:05:40,810
这是没有道理的

117
00:05:40,810 --> 00:05:43,040
而对于声明式来说，你随时可以

118
00:05:43,040 --> 00:05:45,540
看到你声明了什么样的 UI

119
00:05:45,540 --> 00:05:47,520
并且这就是 UI 运行起来的样子

120
00:05:47,520 --> 00:05:50,480
任何时候它都与时间无关

121
00:05:50,480 --> 00:05:52,900
在任何时间它都能被叫去做

122
00:05:52,900 --> 00:05:55,310
它需要做的事情，去画它需要画的东西

123
00:05:55,310 --> 00:05:57,530
并且最终的效果和你面前的代码

124
00:05:57,530 --> 00:05:58,950
完全一样

125
00:05:58,950 --> 00:06:01,200
它还将代码局部化

126
00:06:01,200 --> 00:06:06,110
所有绘制 UI 代码就在你面前

127
00:06:06,110 --> 00:06:08,350
我们昨天写的那些代码

128
00:06:08,350 --> 00:06:12,080
就是展示卡片 UI 需要的全部代码了

129
00:06:12,080 --> 00:06:13,680
并不会有其他地方的代码

130
00:06:13,680 --> 00:06:17,420
来调用这里的函数
然后把 UI 搞的一团糟

131
00:06:17,420 --> 00:06:21,000
实际上，稍后你将会学到结构体

132
00:06:21,000 --> 00:06:22,620
视图就是一种结构体

133
00:06:22,620 --> 00:06:25,370
它们默认是只读的

134
00:06:25,370 --> 00:06:28,850
没人能够通过调用函数来改变它

135
00:06:28,850 --> 00:06:30,700
这是不可能做到的

136
00:06:30,700 --> 00:06:32,850
因此你就能够确信

137
00:06:32,850 --> 00:06:36,060
这个视图的样子永远是

138
00:06:36,060 --> 00:06:38,560
你这里代码所声明的样子

139
00:06:38,560 --> 00:06:40,820
这对于理解你的代码是如何工作的

140
00:06:40,820 --> 00:06:42,660
这个问题上是个巨大的优势

141
00:06:42,660 --> 00:06:43,770
你可以确信

142
00:06:43,770 --> 00:06:46,300
在应用运行过程中不会出现

143
00:06:46,300 --> 00:06:48,130
随机事件

144
00:06:48,130 --> 00:06:49,170
这太棒了

145
00:06:49,170 --> 00:06:52,523
相对于命令式来说
这是 UI 构建方式的巨大进步

146
00:06:54,018 --> 00:06:56,150
最后关于视图要说的是

147
00:06:56,150 --> 00:06:58,180
它是响应式的

148
00:06:58,180 --> 00:07:00,430
这意味着当模型改变的时候

149
00:07:00,430 --> 00:07:03,260
视图会自动更新

150
00:07:03,260 --> 00:07:05,290
因为我之前说过视图不保存状态

151
00:07:05,290 --> 00:07:07,420
任何时刻你都可以让视图

152
00:07:07,420 --> 00:07:09,030
按照模型中的数据来显示

153
00:07:09,030 --> 00:07:11,900
在 Swift 中有一种机制

154
00:07:11,900 --> 00:07:13,530
可以在模型发生变化时

155
00:07:13,530 --> 00:07:16,700
自动更新视图

156
00:07:16,700 --> 00:07:18,690
叫做响应式编程

157
00:07:18,690 --> 00:07:22,410
它会对模型中的变化作出响应

158
00:07:22,410 --> 00:07:23,470
就是这样一种机制

159
00:07:23,470 --> 00:07:26,303
我们引入视图模型（ViewModel）

160
00:07:27,980 --> 00:07:32,980
来实现这种机制

161
00:07:33,044 --> 00:07:36,870
视图模型的工作就是将视图
绑定到对应的模型上

162
00:07:36,870 --> 00:07:38,940
模型中的数据一旦发生变化

163
00:07:38,940 --> 00:07:41,530
视图就会对其作出响应

164
00:07:41,530 --> 00:07:43,130
在视图模型

165
00:07:43,130 --> 00:07:45,920
对模型和视图进行绑定的过程中

166
00:07:45,920 --> 00:07:49,150
会将模型中的数据转换为
视图可以理解的形式

167
00:07:49,150 --> 00:07:50,980
因为我们希望在声明式编程中

168
00:07:50,980 --> 00:07:53,870
视图能够尽量简洁

169
00:07:53,870 --> 00:07:55,790
我们不希望视图中的代码过多

170
00:07:55,790 --> 00:07:58,750
例如数据类型转换之类的工作

171
00:07:58,750 --> 00:07:59,770
都不要交给视图

172
00:07:59,770 --> 00:08:02,320
而是交给视图模型去做

173
00:08:02,320 --> 00:08:05,480
我们这里构建的记忆游戏中的模型

174
00:08:05,480 --> 00:08:08,150
是一个结构体

175
00:08:08,150 --> 00:08:10,130
这是一个非常简单的示例程序

176
00:08:10,130 --> 00:08:11,940
但是你可以设想这里的模型

177
00:08:11,940 --> 00:08:15,560
是一个 SQL 数据库，或是向网络发出的

178
00:08:15,560 --> 00:08:17,610
HTTP 请求

179
00:08:17,610 --> 00:08:19,760
这样的模型就相当复杂了

180
00:08:19,760 --> 00:08:22,460
视图模型可以将其封装到

181
00:08:22,460 --> 00:08:25,080
更简洁的数据结构中

182
00:08:25,080 --> 00:08:27,420
之后再传递给视图

183
00:08:27,420 --> 00:08:30,340
这样视图中就只有实现绘制的代码了

184
00:08:30,340 --> 00:08:32,760
视图模型在这里扮演的角色

185
00:08:32,760 --> 00:08:36,053
就像一个模型数据的解释者

186
00:08:36,990 --> 00:08:40,101
这样我们就引入了介于模型和视图

187
00:08:40,101 --> 00:08:41,960
之间的视图模型

188
00:08:41,960 --> 00:08:44,750
它帮助视图实现

189
00:08:44,750 --> 00:08:48,020
自动更新

190
00:08:48,020 --> 00:08:50,430
那么它是如何做到的呢？

191
00:08:50,430 --> 00:08:51,890
首先，视图模型

192
00:08:51,890 --> 00:08:54,710
会随时关注模型的变化

193
00:08:54,710 --> 00:08:57,390
它可以通过任何方式实现

194
00:08:57,390 --> 00:09:00,900
如果你的模型是一个结构体
那相当容易

195
00:09:00,900 --> 00:09:02,600
我又一次谈到了结构体

196
00:09:02,600 --> 00:09:05,450
之后还会讲到更多关于 Swift 中
结构体这个类型的特性

197
00:09:05,450 --> 00:09:07,980
其中一个重要的特性是

198
00:09:07,980 --> 00:09:09,460
因为将结构体

199
00:09:09,460 --> 00:09:11,431
传递给函数时会被复制一份

200
00:09:11,431 --> 00:09:15,030
所以 Swift 知道结构体发生变化的时机

201
00:09:15,030 --> 00:09:16,998
这个特性可以用于追踪结构体
什么时候发生改变

202
00:09:16,998 --> 00:09:19,110
所以，当模型是结构体时

203
00:09:19,110 --> 00:09:22,710
视图模型很容易就能知道模型
什么时候发生改变

204
00:09:22,710 --> 00:09:24,600
如果模型是一个 SQL 数据库的话

205
00:09:24,600 --> 00:09:26,980
我不知道大家对数据库了解多少

206
00:09:26,980 --> 00:09:30,610
但把数据插入到数据库中是十分简单的

207
00:09:30,610 --> 00:09:33,270
这样当数据库发生改变时
你就会收到通知

208
00:09:33,270 --> 00:09:34,303
但模型的这些改变

209
00:09:34,303 --> 00:09:36,980
能否被收到就要看视图模型的了

210
00:09:36,980 --> 00:09:40,477
这是视图模型主要的工作之一

211
00:09:40,477 --> 00:09:44,250
接下来，当数据发生改变的时候
视图模型可能会对数据进行转换

212
00:09:44,250 --> 00:09:46,140
它可能将数据转换成另一种格式

213
00:09:46,140 --> 00:09:48,560
或者做一些类似的事情

214
00:09:48,560 --> 00:09:53,370
然后它就会向全世界对此
感兴趣的人发布通知

215
00:09:53,370 --> 00:09:54,930
通知它们某些东西发生了改变

216
00:09:54,930 --> 00:09:58,090
这就是它在做的事儿
通知大家有东西发生了改变

217
00:09:58,090 --> 00:10:01,820
但要知道，它没有引用任何一个视图

218
00:10:01,820 --> 00:10:04,270
视图模型不会直接引用它的视图

219
00:10:04,270 --> 00:10:05,860
理解这点相当重要

220
00:10:05,860 --> 00:10:10,590
视图模型不会直接和它的视图进行通信

221
00:10:10,590 --> 00:10:11,934
当模型发生改变的时候

222
00:10:11,934 --> 00:10:15,610
视图模型会发布相关通知

223
00:10:15,610 --> 00:10:20,350
然后视图也订阅了相关的通知

224
00:10:20,350 --> 00:10:22,760
当它知道有东西发生了改变

225
00:10:22,760 --> 00:10:25,780
它就会去问视图模型

226
00:10:25,780 --> 00:10:27,480
世界当前是什么状态

227
00:10:27,480 --> 00:10:30,297
然后它按照世界当前的状态
重新绘制它自己

228
00:10:30,297 --> 00:10:32,490
至于为什么它不直接去问模型

229
00:10:32,490 --> 00:10:34,610
而是去问视图模型

230
00:10:34,610 --> 00:10:36,480
是因为视图模型可能需要

231
00:10:36,480 --> 00:10:38,240
帮视图转换一下模型的数据

232
00:10:38,240 --> 00:10:40,720
也可能是视图模型需要

233
00:10:40,720 --> 00:10:42,870
保护模型，避免那些不怀好意的视图

234
00:10:42,870 --> 00:10:44,780
对模型做一些不好的事情

235
00:10:44,780 --> 00:10:46,927
整个系统就是这么工作的
就是这么简单

236
00:10:46,927 --> 00:10:49,098
视图模型负责通知模型的改变

237
00:10:49,098 --> 00:10:50,920
任何时候有东西发生改变了

238
00:10:50,920 --> 00:10:53,130
它就会说，有东西发生了改变

239
00:10:53,130 --> 00:10:57,180
然后视图们就会观察到这些改变

240
00:10:57,180 --> 00:10:59,550
之后视图就会从视图模型那里

241
00:10:59,550 --> 00:11:01,260
获取相关数据并且重新绘制自己

242
00:11:01,260 --> 00:11:02,829
而这就是视图在做的事情

243
00:11:02,829 --> 00:11:06,400
根据模型当下的状态
不断更新自己

244
00:11:06,400 --> 00:11:09,790
当然这中间少不了视图模型这个解释者

245
00:11:09,790 --> 00:11:13,780
这就是所有相关知识的说明

246
00:11:13,780 --> 00:11:18,200
接下来我们来看一下在 Swift 里
它是如何运转的

247
00:11:18,200 --> 00:11:21,760
我放了一些语法关键词在这里，比如
ObservableObjects

248
00:11:21,760 --> 00:11:25,080
还有 onReceive
objectWillChange 等等

249
00:11:25,080 --> 00:11:26,960
这些东西就是我将在下周

250
00:11:26,960 --> 00:11:28,167
讲授的内容

251
00:11:28,167 --> 00:11:29,560
实际上

252
00:11:29,560 --> 00:11:31,740
我们今天课程结束时所做出的示例程序

253
00:11:31,740 --> 00:11:33,770
就会用到一些关键字

254
00:11:33,770 --> 00:11:36,493
来实现 MVVM 设计范式

255
00:11:37,660 --> 00:11:40,320
那么视图如何向模型传递信息呢？

256
00:11:40,320 --> 00:11:42,384
刚才我们探讨了

257
00:11:42,384 --> 00:11:44,187
模型如何将数据传递给视图

258
00:11:44,187 --> 00:11:46,860
视图会随时反映模型当前的状态

259
00:11:46,860 --> 00:11:50,110
那么当视图中按钮被按下

260
00:11:50,110 --> 00:11:52,720
或产生轻扫手势时

261
00:11:52,720 --> 00:11:55,310
模型该发生怎样的变化呢？

262
00:11:55,310 --> 00:11:56,920
变化是怎样实现的呢？

263
00:11:56,920 --> 00:12:01,330
为了实现模型的变化

264
00:12:01,330 --> 00:12:05,250
我们为视图模型增加另一个职责
让它处理意图（Intent）

265
00:12:05,250 --> 00:12:09,060
说到意图，我是说用户的意图

266
00:12:09,060 --> 00:12:12,090
真实的终端用户的意图

267
00:12:12,090 --> 00:12:15,370
我们知道，还有一种与 MVVM 设计范式

268
00:12:15,370 --> 00:12:18,380
相关的架构

269
00:12:18,380 --> 00:12:20,870
叫做 Model-View-Intent
（模型—视图—意图）

270
00:12:20,870 --> 00:12:23,500
更清晰地表明用户

271
00:12:23,500 --> 00:12:25,730
可以通过意图来完成操作

272
00:12:25,730 --> 00:12:30,730
由于苹果 iOS 平台的 SwiftUI 框架
并没有实现意图机制

273
00:12:31,180 --> 00:12:34,140
所以我只把意图当做一个概念

274
00:12:34,140 --> 00:12:35,550
来讨论

275
00:12:35,550 --> 00:12:38,300
意图是用户的意图

276
00:12:38,300 --> 00:12:41,340
在我们的记忆游戏中有个典型的例子

277
00:12:41,340 --> 00:12:44,550
用户要根据自己的意图选择卡片

278
00:12:44,550 --> 00:12:45,950
这就是他们的意图

279
00:12:45,950 --> 00:12:48,880
所以我们靠视图模型来处理这些意图

280
00:12:48,880 --> 00:12:52,530
它通过给视图提供方法调用

281
00:12:52,530 --> 00:12:56,010
来明确可以有哪些意图

282
00:12:56,010 --> 00:12:58,630
当视图产生手势

283
00:12:58,630 --> 00:13:00,920
例如点按手势、轻扫手势等

284
00:13:00,920 --> 00:13:03,850
视图就会调用视图模型中的

285
00:13:03,850 --> 00:13:04,683
意图方法

286
00:13:04,683 --> 00:13:06,880
我们可以在文档中标注一下

287
00:13:06,880 --> 00:13:09,993
在视图模型代码的某个区域

288
00:13:09,993 --> 00:13:12,120
顶部用一个注释写道：

289
00:13:12,120 --> 00:13:17,120
“这些是终端用户的意图”

290
00:13:17,750 --> 00:13:21,100
这样就明确地指出

291
00:13:21,100 --> 00:13:24,000
用户做些什么就能更改模型

292
00:13:24,000 --> 00:13:25,977
当视图模型的方法

293
00:13:25,977 --> 00:13:28,680
被调用时

294
00:13:28,680 --> 00:13:30,310
它们就会修改模型

295
00:13:30,310 --> 00:13:33,750
再说一次，视图模型了解模型的全貌

296
00:13:33,750 --> 00:13:36,040
知道模型是如何呈现的
如果模型是 SQL 数据库

297
00:13:36,040 --> 00:13:38,999
它就会执行 SQL 命令修改模型

298
00:13:38,999 --> 00:13:42,240
如果模型是结构体
要做的也许只是设置变量的值

299
00:13:42,240 --> 00:13:45,040
或是调用模型中的方法来修改

300
00:13:45,040 --> 00:13:46,730
为了实现用户的意图

301
00:13:46,730 --> 00:13:50,990
你可以使用任何有效的方式修改模型

302
00:13:50,990 --> 00:13:52,400
现在模型发生了变化

303
00:13:52,400 --> 00:13:53,530
接下来做什么呢？

304
00:13:53,530 --> 00:13:56,280
还是通过我们刚刚说到的意图

305
00:13:56,280 --> 00:13:59,240
当视图模型获悉到发生的变化

306
00:13:59,240 --> 00:14:01,470
它会发出变化通知

307
00:14:01,470 --> 00:14:03,940
然后视图就会收到这些通知

308
00:14:03,940 --> 00:14:06,910
并且自行重绘

309
00:14:06,910 --> 00:14:08,670
这张图片

310
00:14:08,670 --> 00:14:10,240
你看到的这张完整的图片

311
00:14:10,240 --> 00:14:13,239
就是 MVVM 架构

312
00:14:13,239 --> 00:14:15,560
这些就是我们实现所有这些

313
00:14:15,560 --> 00:14:18,470
你会在所写的代码中看到的

314
00:14:18,470 --> 00:14:19,896
Swift 关键字

315
00:14:19,896 --> 00:14:21,630
就是这么简单

316
00:14:21,630 --> 00:14:24,800
这里最关键的一点

317
00:14:24,800 --> 00:14:27,150
是理解模型、视图、视图模型各自的作用

318
00:14:27,150 --> 00:14:30,500
因为它们在代码中分工明确

319
00:14:30,500 --> 00:14:32,230
所以，在今天的示例程序中

320
00:14:32,230 --> 00:14:35,810
我们要为记忆游戏

321
00:14:35,810 --> 00:14:37,800
实现 MVVM 架构

322
00:14:37,800 --> 00:14:40,990
我们不能使用其他的方式来实现记忆游戏

323
00:14:40,990 --> 00:14:43,170
如果那么做了，将会变得非常糟糕

324
00:14:43,170 --> 00:14:44,130
我不确定该如何做

325
00:14:44,130 --> 00:14:47,040
但如果使用其他方式实现
那也是错误的选择

326
00:14:47,040 --> 00:14:48,543
我们想要使用 MVVM

327
00:14:50,080 --> 00:14:51,630
好了，在我们使用 MVVM 之前

328
00:14:51,630 --> 00:14:55,150
我们先讨论另一个话题

329
00:14:55,150 --> 00:14:56,542
Swift 中的类型

330
00:14:56,542 --> 00:14:58,060
在 Swift 编程语言中

331
00:14:58,060 --> 00:14:59,847
有许多知识要学习

332
00:14:59,847 --> 00:15:01,710
但是我们从类型开始

333
00:15:01,710 --> 00:15:03,710
这里有六种类型

334
00:15:03,710 --> 00:15:08,010
结构体，你之前就遇到过

335
00:15:08,010 --> 00:15:10,680
类（class）是面向对象编程使用的类型

336
00:15:10,680 --> 00:15:11,560
我们之后会学

337
00:15:11,560 --> 00:15:14,219
协议（protocol），其实你之前也见到过

338
00:15:14,219 --> 00:15:17,890
我们无需关心具体类型的
泛型（generic）

339
00:15:17,890 --> 00:15:19,050
以及泛型系统

340
00:15:19,050 --> 00:15:21,230
以及枚举（enum）和函数（function）

341
00:15:21,230 --> 00:15:24,173
没错，在 Swift 中，函数是一种类型

342
00:15:25,260 --> 00:15:26,560
不过时间有限

343
00:15:26,560 --> 00:15:30,030
我只准备讲这四种类型：

344
00:15:30,030 --> 00:15:34,080
结构体、类、泛型和函数

345
00:15:34,080 --> 00:15:37,760
下回再讲协议和枚举

346
00:15:37,760 --> 00:15:40,520
我们先从结构体和类开始

347
00:15:40,520 --> 00:15:43,350
它们看起来几乎一模一样

348
00:15:43,350 --> 00:15:45,580
语法也非常相似

349
00:15:45,580 --> 00:15:49,393
它们都能像上一回的示例程序

350
00:15:49,393 --> 00:15:52,070
存储 isFaceUp 这样的变量

351
00:15:52,070 --> 00:15:54,760
它们还都可以有计算变量

352
00:15:54,760 --> 00:15:56,790
例如我们上次做的演示里的

353
00:15:56,790 --> 00:15:57,800
body 变量

354
00:15:57,800 --> 00:16:00,010
每当有人访问这个变量的时候

355
00:16:00,010 --> 00:16:02,530
它就会被计算一次

356
00:16:02,530 --> 00:16:03,763
类和结构体都能有计算变量

357
00:16:04,610 --> 00:16:07,310
它们还可以有一种被称为 let 的东西

358
00:16:07,310 --> 00:16:10,440
let 实际上就是一个 var

359
00:16:10,440 --> 00:16:11,620
只不过这个 var 并不能变化（vary）

360
00:16:11,620 --> 00:16:13,810
它不是变量，它是常量

361
00:16:13,810 --> 00:16:15,600
所以 let 本质上是一个常量

362
00:16:15,600 --> 00:16:18,280
它们俩都能含有常量

363
00:16:18,280 --> 00:16:20,350
它们还能含有函数

364
00:16:20,350 --> 00:16:23,260
我还没有讲太多函数的语法

365
00:16:23,260 --> 00:16:27,240
所以这里我们花点时间讲一下

366
00:16:27,240 --> 00:16:29,640
我们已经知道，对于一个函数来说

367
00:16:29,640 --> 00:16:34,230
它的每个参数都有标签
对于这个 multiply 函数来说

368
00:16:34,230 --> 00:16:35,610
它有两个参数

369
00:16:35,610 --> 00:16:37,217
第一个参数叫做 operand

370
00:16:37,217 --> 00:16:38,997
第二个叫做 by

371
00:16:38,997 --> 00:16:42,105
它们都是 Int 类型
并且函数返回一个 Int

372
00:16:42,105 --> 00:16:44,540
在 multiply 内部

373
00:16:44,540 --> 00:16:48,520
我使用标签 operand
和 by 来做乘法

374
00:16:48,520 --> 00:16:52,750
然后我写上
multiply(operand: 5, by: 6)

375
00:16:52,750 --> 00:16:56,050
显然它会给我们返回 30

376
00:16:56,050 --> 00:16:58,960
我想告诉你的是这些标签

377
00:16:58,960 --> 00:17:02,760
实际上，每个参数可以有两个标签

378
00:17:02,760 --> 00:17:04,980
这里我还有一个 multiply

379
00:17:04,980 --> 00:17:07,350
但每个参数都有两个标签

380
00:17:07,350 --> 00:17:11,550
第一个参数有个下划线标签

381
00:17:11,550 --> 00:17:16,020
和 operand 标签
第二个参数有 by 标签

382
00:17:16,020 --> 00:17:18,114
和 otherOperand 标签

383
00:17:18,114 --> 00:17:21,130
每一个参数都有一个蓝色的标签

384
00:17:21,130 --> 00:17:24,740
和一个紫色的标签
所以为什么会有两个标签呢？

385
00:17:24,740 --> 00:17:29,040
实际上，蓝色标签是在调用函数时使用的

386
00:17:29,040 --> 00:17:32,720
紫色标签是在函数内使用的

387
00:17:32,720 --> 00:17:35,520
因此紫色标签看起来和前一个函数相同

388
00:17:35,520 --> 00:17:37,660
return operand * otherOperand

389
00:17:37,660 --> 00:17:42,660
这就是两个标签中的第二个标签

390
00:17:42,870 --> 00:17:44,260
但是看看调用

391
00:17:44,260 --> 00:17:48,550
写的是 myltiply(5, by: 6)

392
00:17:48,550 --> 00:17:52,560
所以下划线的意思是“没有标签”

393
00:17:52,560 --> 00:17:55,680
之前我们看到在创建 Text

394
00:17:55,680 --> 00:17:57,500
的时候后跟着一个表情字符串

395
00:17:57,500 --> 00:17:58,833
它看起来没有标签

396
00:17:58,833 --> 00:18:03,360
就是因为它在代码中使用了下划线

397
00:18:03,360 --> 00:18:04,704
让你可以省略它

398
00:18:04,704 --> 00:18:08,100
下划线永远表示“省略”

399
00:18:08,100 --> 00:18:10,130
或者“没用过的”，你可以把它视作

400
00:18:10,130 --> 00:18:13,060
Swift 中表示“没有用过”的字符

401
00:18:13,060 --> 00:18:16,090
在今天的演示中你也会看到这一点

402
00:18:16,090 --> 00:18:19,800
第二个参数依然使用实参标签 by

403
00:18:19,800 --> 00:18:21,763
我们把它叫做实参标签

404
00:18:21,763 --> 00:18:24,883
而 otherOperand 是形参名

405
00:18:25,720 --> 00:18:27,550
稍后你可以看到更多例子

406
00:18:27,550 --> 00:18:31,180
但这基本上就是函数的语法了

407
00:18:31,180 --> 00:18:35,600
函数在结构体和类中都可以存在

408
00:18:35,600 --> 00:18:38,330
另外，结构体和类都有一种特殊函数

409
00:18:38,330 --> 00:18:40,461
叫做构造器（initializer）

410
00:18:40,461 --> 00:18:45,133
它的功能是通过参数给
没有初始值的属性赋值

411
00:18:46,230 --> 00:18:50,220
来创建结构体或类

412
00:18:50,220 --> 00:18:51,710
我们已经在 CardView 中看到这一点了

413
00:18:51,710 --> 00:18:53,698
还记得吗

414
00:18:53,698 --> 00:18:56,954
我们创建它的时候
把参数 isFaceUp 设定为 true

415
00:18:56,954 --> 00:19:00,560
通过这种方式把 CardView 中的变量
isFaceUp 的值设定好了

416
00:19:00,560 --> 00:19:04,410
你可以用这种方法进行初始化

417
00:19:04,410 --> 00:19:08,060
但是如果我们想用其他类型的参数

418
00:19:08,060 --> 00:19:09,915
来进行初始化呢？

419
00:19:09,915 --> 00:19:12,900
一个很好的例子
就是我们的 MemoryGame

420
00:19:12,900 --> 00:19:15,310
因为当你创建 MemoryGame 的时候

421
00:19:15,310 --> 00:19:18,910
它的变量应该是卡片或者其他一些东西

422
00:19:18,910 --> 00:19:20,750
但实际上当你
创建 MemoryGame 的时候

423
00:19:20,750 --> 00:19:23,650
你希望设定的是游戏中有几对卡片

424
00:19:23,650 --> 00:19:25,428
这是一个比较大的
有 20 张卡片的 MemoryGame 吗？

425
00:19:25,428 --> 00:19:29,120
或者是一个小一点的
只有 6 对卡片那种？

426
00:19:29,120 --> 00:19:30,100
又或者是其他大小的？

427
00:19:30,100 --> 00:19:32,750
所以创建 MemoryGame 的参数

428
00:19:32,750 --> 00:19:36,110
应该是卡片对数
（numberOfPairsOfCards）

429
00:19:36,110 --> 00:19:38,270
它应该是一个 Int

430
00:19:38,270 --> 00:19:41,352
然后我在 MemoryGame 中
写一个 init 函数

431
00:19:41,352 --> 00:19:43,280
并把卡片对数作为参数

432
00:19:43,280 --> 00:19:45,270
而且很酷的是我可以

433
00:19:45,270 --> 00:19:47,570
有多个 init 函数

434
00:19:47,570 --> 00:19:49,300
每一个 init 都接受不同的参数

435
00:19:49,300 --> 00:19:51,750
因为可能有其他创建
MemoryGame 的方法

436
00:19:51,750 --> 00:19:55,733
所以结构体和类都有构造器

437
00:19:56,660 --> 00:19:59,210
那结构体和类的区别在哪呢？

438
00:19:59,210 --> 00:20:02,250
它们看起来非常相似
实际上也的确比较相似

439
00:20:02,250 --> 00:20:04,050
但它们也有一些根本性的不同

440
00:20:04,050 --> 00:20:06,730
现在我们来谈谈它们的不同之处

441
00:20:06,730 --> 00:20:11,130
最大的不同点是
结构体是值类型

442
00:20:11,130 --> 00:20:13,940
而类是引用类型

443
00:20:13,940 --> 00:20:16,610
现在我仔细解释一下

444
00:20:16,610 --> 00:20:18,861
值类型和引用类型

445
00:20:18,861 --> 00:20:23,430
引用类型是通过指针传递的

446
00:20:23,430 --> 00:20:25,710
它保存在堆中

447
00:20:25,710 --> 00:20:27,570
所以当你创建类的时候

448
00:20:27,570 --> 00:20:30,130
它们会被存储在堆里

449
00:20:30,130 --> 00:20:31,570
你们应该都懂这是什么意思

450
00:20:31,570 --> 00:20:34,730
换句话说就是保存在内存里
当我传递它的时候

451
00:20:34,730 --> 00:20:36,120
我传递的是指向它的指针

452
00:20:36,120 --> 00:20:37,610
所以可能会有很多人都有

453
00:20:37,610 --> 00:20:39,670
指向同一个类实例的指针

454
00:20:39,670 --> 00:20:44,670
结构体并不传递指针
它们会被复制

455
00:20:45,550 --> 00:20:49,720
所以如果你给函数的
参数传递一个结构体

456
00:20:49,720 --> 00:20:51,535
那个函数就会有一个原结构体的拷贝

457
00:20:51,535 --> 00:20:53,811
甚至假如我只是有两个变量

458
00:20:53,811 --> 00:20:56,090
然后我让第二个变量

459
00:20:56,090 --> 00:20:57,720
等于第一个

460
00:20:57,720 --> 00:21:01,690
这两个变量都会是独立的拷贝

461
00:21:01,690 --> 00:21:04,560
你可能会觉得
“哇哦你在开玩笑吧”

462
00:21:04,560 --> 00:21:08,010
“因为数组是个结构体”

463
00:21:08,010 --> 00:21:10,700
“所以每当我把一个巨大的数组”

464
00:21:10,700 --> 00:21:14,200
“传递到一个函数中的时候
我都要复制一次吗？”

465
00:21:14,200 --> 00:21:17,840
显然，答案是不会

466
00:21:17,840 --> 00:21:20,340
在 Swift 底层中

467
00:21:20,340 --> 00:21:21,640
当你传递一些东西

468
00:21:21,640 --> 00:21:23,530
复制这些结构体的时候

469
00:21:23,530 --> 00:21:26,720
它并不会每个比特都做复制

470
00:21:26,720 --> 00:21:30,880
它们会共享同一份拷贝
直到你尝试改变其中的内容

471
00:21:30,880 --> 00:21:33,513
所以如果你给函数传递一个数组

472
00:21:33,513 --> 00:21:36,650
它不会完全复制出一个新的数组

473
00:21:36,650 --> 00:21:40,630
当你想在数组后面添加一些东西的时候

474
00:21:40,630 --> 00:21:44,015
它才会进行比特级别的复制

475
00:21:44,015 --> 00:21:46,410
然后你才可以在数组里添加东西

476
00:21:46,410 --> 00:21:49,750
这时你添加的数组是与原来不同的

477
00:21:49,750 --> 00:21:50,590
另一份拷贝

478
00:21:50,590 --> 00:21:52,630
我们称这种机制为写时复制
（copy-on-write）

479
00:21:52,630 --> 00:21:54,950
当你打算改变结构体的内容的时候

480
00:21:54,950 --> 00:21:57,520
它才会进行完整的复制

481
00:21:57,520 --> 00:22:01,810
但是从语义上来说
每次你传递一个结构体

482
00:22:01,810 --> 00:22:03,220
它都会进行复制

483
00:22:03,220 --> 00:22:04,840
总是会复制

484
00:22:04,840 --> 00:22:06,810
所以你的代码不会共享结构体

485
00:22:06,810 --> 00:22:10,240
当你传递它们的时候
它们不会共享，而会复制

486
00:22:10,240 --> 00:22:12,248
在另一方面，对于类

487
00:22:12,248 --> 00:22:13,770
你传递的是指针

488
00:22:13,770 --> 00:22:17,625
所以与结构体不同
这里需要做的是引用计数

489
00:22:17,625 --> 00:22:21,145
数清有多少指针指向同一个实例

490
00:22:21,145 --> 00:22:22,540
并且这是自动进行的

491
00:22:22,540 --> 00:22:25,870
当最后没有人再指向堆中的实例时

492
00:22:25,870 --> 00:22:29,543
堆中被占用的内存就会

493
00:22:29,543 --> 00:22:30,923
被释放

494
00:22:31,920 --> 00:22:34,640
这叫做自动引用计数
（Automatic Reference Counting）

495
00:22:34,640 --> 00:22:36,470
所以这是两种非常不同的

496
00:22:36,470 --> 00:22:38,840
思维方式，对吧？

497
00:22:38,840 --> 00:22:43,180
传递拷贝和传递指针

498
00:22:43,180 --> 00:22:45,710
大多是你见到的东西都是结构体

499
00:22:45,710 --> 00:22:48,480
例如数组 Array、字典 Dictionary
整形数 Int、布尔 Bool、双精度浮点数 Double

500
00:22:48,480 --> 00:22:50,690
这些都是结构体

501
00:22:50,690 --> 00:22:54,120
结构体基本上是为了支持

502
00:22:54,120 --> 00:22:55,540
一种叫做函数式编程的

503
00:22:55,540 --> 00:22:58,230
编程范式而创建的

504
00:22:58,230 --> 00:22:59,750
函数式编程关注的是

505
00:22:59,750 --> 00:23:02,900
事物的功能

506
00:23:02,900 --> 00:23:06,750
类是为了面向对象编程而创建的

507
00:23:06,750 --> 00:23:09,125
面向对象编程关注的是

508
00:23:09,125 --> 00:23:11,140
将数据和功能

509
00:23:11,140 --> 00:23:15,320
封装到某个容器里面

510
00:23:15,320 --> 00:23:16,490
或者说一个对象里面

511
00:23:16,490 --> 00:23:18,740
类和结构体这两种概念是十分不同的

512
00:23:18,740 --> 00:23:22,140
但它们想达到的目的很类似

513
00:23:22,140 --> 00:23:24,900
将一些东西封装起来

514
00:23:24,900 --> 00:23:29,050
也清楚各种功能在你的程序中的位置

515
00:23:29,050 --> 00:23:32,140
但它们两个的做法十分不同

516
00:23:32,140 --> 00:23:34,944
你可以通过它们的实现方式来区分

517
00:23:34,944 --> 00:23:37,932
复制一个实例还是用指针指向一个实例

518
00:23:37,932 --> 00:23:40,700
会导致许多不同的行为

519
00:23:40,700 --> 00:23:42,780
在这个学期的课程里

520
00:23:42,780 --> 00:23:45,390
我们将要学习大量关于函数式编程的内容

521
00:23:45,390 --> 00:23:49,230
以及它是如何运作的，哪怕
在这节课剩余的时间里

522
00:23:49,230 --> 00:23:51,900
我们会理解更多相关的知识

523
00:23:51,900 --> 00:23:53,620
我假设你们都十分了解

524
00:23:53,620 --> 00:23:54,930
面向对象编程

525
00:23:54,930 --> 00:23:57,700
使用过 Java 或 C++ 等

526
00:23:57,700 --> 00:23:58,853
所以你应该了解面向对象编程

527
00:23:59,872 --> 00:24:02,210
结构体不支持继承

528
00:24:02,210 --> 00:24:03,770
实际上继承

529
00:24:03,770 --> 00:24:05,920
在函数式编程里

530
00:24:05,920 --> 00:24:08,020
没有什么意义

531
00:24:08,020 --> 00:24:09,280
你会看到在函数式编程里面

532
00:24:09,280 --> 00:24:10,810
确实会有类似继承的地方

533
00:24:10,810 --> 00:24:12,090
但结构体不行

534
00:24:12,090 --> 00:24:13,680
结构体无法支持继承

535
00:24:13,680 --> 00:24:16,520
在 Swift 里，类是支持继承的

536
00:24:16,520 --> 00:24:18,830
只要它想，就可以拥有一个超类

537
00:24:18,830 --> 00:24:20,040
但是只支持单继承

538
00:24:20,040 --> 00:24:22,861
它们只能继承某一个类

539
00:24:22,861 --> 00:24:23,694
这点你们比较熟悉

540
00:24:23,694 --> 00:24:25,507
Java 也是单继承

541
00:24:25,507 --> 00:24:28,890
C++ 也是单继承

542
00:24:28,890 --> 00:24:30,833
所以这也是一个很大的不同点

543
00:24:31,970 --> 00:24:34,130
我跟你们介绍过了它们的构造器

544
00:24:34,130 --> 00:24:36,804
结构体拥有一个逐一成员构造器

545
00:24:36,804 --> 00:24:40,050
初始化所有在结构体中的变量

546
00:24:40,050 --> 00:24:41,670
它是自动生成的

547
00:24:41,670 --> 00:24:44,753
这也是为什么我们输入
CardView(isFaceUp: true)

548
00:24:45,820 --> 00:24:49,353
它就能初始化 isFaceUp 属性为输入的值

549
00:24:49,353 --> 00:24:51,640
因为我们有一个自动生成的构造器

550
00:24:51,640 --> 00:24:53,270
初始化所有的变量

551
00:24:53,270 --> 00:24:55,581
类也有一个自动生成的构造器

552
00:24:55,581 --> 00:24:58,320
但它不会初始化任何一个变量

553
00:24:58,320 --> 00:25:00,160
自动生成的构造器

554
00:25:00,160 --> 00:25:01,540
总是长这样 init()

555
00:25:01,540 --> 00:25:03,070
所以这意味着你所有的变量

556
00:25:03,070 --> 00:25:05,770
都必须等于一个初始化的值

557
00:25:05,770 --> 00:25:08,930
或者你必须提供一个你自己写的构造器

558
00:25:08,930 --> 00:25:13,350
所以在类里面，我们几乎都得
自己编写构造器

559
00:25:13,350 --> 00:25:15,920
因此，我们一般不使用自动生成的构造器

560
00:25:15,920 --> 00:25:17,610
而结构体，一般是混合使用

561
00:25:17,610 --> 00:25:21,730
有时我们会像 CardView 那样
使用逐一成员构造器

562
00:25:21,730 --> 00:25:23,710
有时我们得自己编写构造器

563
00:25:25,460 --> 00:25:27,150
在对值类型编程时

564
00:25:27,150 --> 00:25:30,320
很多情况需要对其复制

565
00:25:30,320 --> 00:25:35,320
那么我们需要明确其可变性

566
00:25:35,910 --> 00:25:38,700
假如你有一个结构体，比如数组

567
00:25:38,700 --> 00:25:40,143
然后你想为它添加元素

568
00:25:40,143 --> 00:25:42,400
它得是一个可变的数组

569
00:25:42,400 --> 00:25:45,080
那么你就需要

570
00:25:45,080 --> 00:25:46,130
明确它是可变的

571
00:25:46,130 --> 00:25:49,890
你得使用 var 关键字而不是 let

572
00:25:49,890 --> 00:25:52,270
还记得我说过结构体和类

573
00:25:52,270 --> 00:25:54,600
都能使用 let 关键字声明为常量吗？

574
00:25:54,600 --> 00:25:57,950
如果你使用 let 创建一个结构体

575
00:25:57,950 --> 00:26:00,920
那么你就无法再改变它

576
00:26:00,920 --> 00:26:03,450
比如它是一个数组的话
你就不能往里面添加元素

577
00:26:03,450 --> 00:26:07,940
但如果你使用 var 创建一个结构体
这时你就能修改它了

578
00:26:07,940 --> 00:26:10,240
然而类总是可变的

579
00:26:10,240 --> 00:26:12,470
类存储在堆里面
你有一个指针指向它们

580
00:26:12,470 --> 00:26:14,410
你总是可以通过那个指针

581
00:26:14,410 --> 00:26:16,570
来修改存储在堆里面的东西

582
00:26:16,570 --> 00:26:20,750
类的可变性是无法被控制的

583
00:26:20,750 --> 00:26:23,620
这是一个很大的问题

584
00:26:23,620 --> 00:26:24,847
当你开始编写程序时

585
00:26:24,847 --> 00:26:29,250
你明白它究竟是在做什么吗？

586
00:26:29,250 --> 00:26:31,040
类有一个很大的问题是

587
00:26:31,040 --> 00:26:32,890
任何一个拥有那个类的指针的人

588
00:26:32,890 --> 00:26:34,250
都能修改它

589
00:26:34,250 --> 00:26:36,151
这会相当的混乱

590
00:26:36,151 --> 00:26:38,660
很难理解发生了什么

591
00:26:38,660 --> 00:26:40,810
所以能明确可变性

592
00:26:40,810 --> 00:26:42,160
对于结构体和函数式编程来说

593
00:26:42,160 --> 00:26:44,820
是个很好的特性

594
00:26:44,820 --> 00:26:47,600
现在你们需要优先考虑使用结构体

595
00:26:47,600 --> 00:26:50,912
你们应该首先尝试使用结构体

596
00:26:50,912 --> 00:26:52,889
只有在特定的情况下

597
00:26:52,889 --> 00:26:55,600
你们才会使用一个类

598
00:26:55,600 --> 00:26:58,860
一会儿我们就看到其中的一种情况

599
00:26:58,860 --> 00:27:01,190
那就是视图模型

600
00:27:01,190 --> 00:27:05,040
MVVM 中的视图模型始终是一个类

601
00:27:05,040 --> 00:27:07,450
还有，iOS 编程的传统做法也是

602
00:27:07,450 --> 00:27:08,770
一切都是基于类的

603
00:27:08,770 --> 00:27:12,180
一切都是面向对象的
而不是函数式编程

604
00:27:12,180 --> 00:27:15,100
那为什么 MVVM 中的视图模型是一个类？

605
00:27:15,100 --> 00:27:17,680
顺便说一下，我们将要
在示例程序里讨论这个问题

606
00:27:17,680 --> 00:27:19,530
这个问题也许和

607
00:27:19,530 --> 00:27:21,820
视图模型需要在许多的视图

608
00:27:21,820 --> 00:27:24,780
之间共享有关

609
00:27:24,780 --> 00:27:27,550
视图模型就像是模型的“门户”

610
00:27:27,550 --> 00:27:29,260
可能会有许多不同的视图想要查看

611
00:27:29,260 --> 00:27:33,530
那个模型，并且共享这个“门户”
（指视图模型）

612
00:27:33,530 --> 00:27:35,000
类很适合用来共享

613
00:27:35,000 --> 00:27:37,110
因为我们都有一个指向它的指针

614
00:27:37,110 --> 00:27:38,560
共享也有缺点

615
00:27:38,560 --> 00:27:40,990
我们会在 MVVM 中尽量
减轻这些缺点的影响

616
00:27:40,990 --> 00:27:43,080
在示例中我也会展示如何做

617
00:27:43,080 --> 00:27:44,650
这就是会使用类的例子了

618
00:27:44,650 --> 00:27:47,380
其他你看到的一切都是结构体

619
00:27:47,380 --> 00:27:49,570
显然你看到过的所有这些视图

620
00:27:49,570 --> 00:27:51,050
它们都是结构体

621
00:27:51,050 --> 00:27:53,160
比如数组、整数、布尔、双精度浮点数

622
00:27:53,160 --> 00:27:54,830
区间，一切都是属于结构体

623
00:27:54,830 --> 00:27:58,720
除了 View 之外
一切都是结构体

624
00:27:58,720 --> 00:28:02,720
View 实际上是不同的
叫做协议的类型

625
00:28:02,720 --> 00:28:05,980
View 不是结构体或者类
它是一个协议

626
00:28:05,980 --> 00:28:07,870
下周，我们也会详细地

627
00:28:07,870 --> 00:28:10,223
讲解协议

628
00:28:11,360 --> 00:28:15,540
下面我想讲一下泛型

629
00:28:15,540 --> 00:28:18,350
我们可能想要操控某种数据结构

630
00:28:18,350 --> 00:28:21,170
但是我们并不清楚它的类型

631
00:28:21,170 --> 00:28:24,330
或者我们并不关心它的类型

632
00:28:24,330 --> 00:28:27,200
给我任何一种类型都行
但问题是 Swift

633
00:28:27,200 --> 00:28:30,250
它是一种强类型的语言

634
00:28:30,250 --> 00:28:33,450
所有变量、所有参数、所有函数

635
00:28:33,450 --> 00:28:36,080
任何事物都必须有一个类型

636
00:28:36,080 --> 00:28:38,490
没有东西是没有类型

637
00:28:38,490 --> 00:28:41,080
当然，为了向后兼容老的 UIKit

638
00:28:41,080 --> 00:28:43,180
的确有一种无类型的东西

639
00:28:43,180 --> 00:28:45,790
但是在 Swift 中
在 SwiftUI 中

640
00:28:45,790 --> 00:28:47,700
我们一定不使用无类型的变量

641
00:28:47,700 --> 00:28:50,370
所有变量必须有类型

642
00:28:50,370 --> 00:28:52,630
那么，我们怎么能在不关心

643
00:28:52,630 --> 00:28:54,880
这种类型具体是什么的情况下

644
00:28:54,880 --> 00:28:56,030
指定它的类型

645
00:28:56,030 --> 00:28:59,160
比如我们正在操控某个东西

646
00:28:59,160 --> 00:29:02,010
但是我们并不关心它的类型是什么

647
00:29:02,010 --> 00:29:03,370
所以，我们该怎么做到这一点呢？

648
00:29:03,370 --> 00:29:05,740
这个问题可以通过例子很好地展示

649
00:29:05,740 --> 00:29:09,080
世界上最好的例子之一是数组

650
00:29:09,080 --> 00:29:13,000
数组的功能就是容纳一些事物

651
00:29:13,000 --> 00:29:15,910
但数组并不关心
存储内容的具体类型

652
00:29:15,910 --> 00:29:18,480
在数组的代码里
需要存储那些数据

653
00:29:18,480 --> 00:29:21,983
它需要通过内部的某个变量

654
00:29:21,983 --> 00:29:25,270
存储这些数据

655
00:29:25,270 --> 00:29:28,140
所以我们如何解决需要

656
00:29:28,140 --> 00:29:30,560
让数组支持存储不同类型数据的难题呢？

657
00:29:30,560 --> 00:29:31,860
实际上我们甚至不关心

658
00:29:31,860 --> 00:29:33,820
这是一个整数类型的数组
还是一个字符串类型的数组

659
00:29:33,820 --> 00:29:37,060
或是存储数组的数组
集合类型的数组等

660
00:29:37,060 --> 00:29:38,740
这些数组都可以

661
00:29:38,740 --> 00:29:42,110
另外，数组本身有方法和变量

662
00:29:42,110 --> 00:29:44,500
比如，这些方法能让你
向数组里添加元素

663
00:29:44,500 --> 00:29:46,134
或者是取得数组里的某个值

664
00:29:46,134 --> 00:29:48,930
我们要如何声明它们的返回类型

665
00:29:48,930 --> 00:29:50,630
和它们的参数类型呢？

666
00:29:50,630 --> 00:29:53,580
答案是使用泛型

667
00:29:53,580 --> 00:29:56,940
现在，像其他的编程语言，比如 Java

668
00:29:56,940 --> 00:29:58,080
同样有泛型

669
00:29:58,080 --> 00:30:00,280
对于你们中的有些人来说
这实际上相当于复习

670
00:30:00,280 --> 00:30:02,810
但是我们会把泛型

671
00:30:02,810 --> 00:30:05,600
更深层次地进行讲解
并在下一个星期

672
00:30:05,600 --> 00:30:08,760
结合 Swift 语言的
其他一些特性一起来说

673
00:30:08,760 --> 00:30:12,020
现在我们来聊聊
数组是如何应用泛型的

674
00:30:12,020 --> 00:30:13,510
首先是数组的声明

675
00:30:13,510 --> 00:30:15,760
看起来大致是这样的

676
00:30:15,760 --> 00:30:19,460
struct Array<Element>

677
00:30:19,460 --> 00:30:23,350
然后，比如添加元素的
append 方法

678
00:30:23,350 --> 00:30:25,910
有一个 Element 类型的参数

679
00:30:25,910 --> 00:30:28,600
这个 Element 类型是什么？

680
00:30:28,600 --> 00:30:32,320
我喜欢称之为“不确定类型”

681
00:30:32,320 --> 00:30:36,010
它是数组随便编的名字

682
00:30:36,010 --> 00:30:38,860
意味着我不在乎它具体表示的类型

683
00:30:38,860 --> 00:30:40,140
所以这是一个不确定类型

684
00:30:40,140 --> 00:30:41,120
数组也不在乎它实际的类型

685
00:30:41,120 --> 00:30:43,880
它可以是 Int 类型，String 类型
无论什么都可以

686
00:30:43,880 --> 00:30:46,660
这本质是 Swift 中的另一种类型

687
00:30:46,660 --> 00:30:50,430
我习惯把它称为不确定类型

688
00:30:50,430 --> 00:30:53,530
那么数组的 append 方法

689
00:30:53,530 --> 00:30:56,310
对 Element 的具体类型一无所知

690
00:30:56,310 --> 00:30:58,520
不会向元素类型发送任何信息

691
00:30:58,520 --> 00:30:59,673
或者是访问任何具体的属性

692
00:30:59,673 --> 00:31:02,550
数组只是将其存储在内部的变量中

693
00:31:02,550 --> 00:31:04,730
所以 Element 实际有点像占位符

694
00:31:04,730 --> 00:31:06,400
用来替代实际的类型

695
00:31:06,400 --> 00:31:10,090
那么什么时候会被
设置为真正的类型

696
00:31:10,090 --> 00:31:11,150
而不仅仅是一个占位符？

697
00:31:11,150 --> 00:31:13,360
是我们使用数组的时候

698
00:31:13,360 --> 00:31:17,900
如果我声明一个数组，比如
var a = Array

699
00:31:17,900 --> 00:31:19,910
现在，我在尖括号里

700
00:31:19,910 --> 00:31:22,690
放上元素实际的类型

701
00:31:22,690 --> 00:31:24,790
这就是 Int 类型的 Array

702
00:31:24,790 --> 00:31:26,970
这就像是有人在 Array 的代码里

703
00:31:26,970 --> 00:31:29,820
使用了查找替换功能

704
00:31:29,820 --> 00:31:32,620
将所有的 Element 换成了 Int

705
00:31:32,620 --> 00:31:36,460
这样一来
append 函数就会将 Int 类型作为参数

706
00:31:36,460 --> 00:31:39,990
这就是为什么我写下了 a.append(5)
并且毫无问题

707
00:31:39,990 --> 00:31:41,440
因为 5 是一个 Int

708
00:31:41,440 --> 00:31:44,403
append 函数已将 Int 类型作为参数

709
00:31:45,290 --> 00:31:47,320
所以说
Array 中的 Element 类型

710
00:31:47,320 --> 00:31:49,760
在 Array 被使用时确立

711
00:31:49,760 --> 00:31:52,090
而实现 Array 的代码中

712
00:31:52,090 --> 00:31:53,160
类型是剥离的

713
00:31:53,160 --> 00:31:56,870
它直接用 Element 这个
并非实际特定类型的类型

714
00:31:56,870 --> 00:31:59,140
注意当你使用这样的类型时

715
00:31:59,140 --> 00:32:01,620
你需要让其他代码也明确这一点

716
00:32:01,620 --> 00:32:03,000
因为你需要依赖它们

717
00:32:03,000 --> 00:32:05,080
来确定这里的具体类型

718
00:32:05,080 --> 00:32:07,700
这就是这里的尖括号

719
00:32:07,700 --> 00:32:09,580
存在的意义

720
00:32:09,580 --> 00:32:12,096
多个不定类型的存在也是合法的


721
00:32:12,096 --> 00:32:15,748
struct Array<Element, Foo, ...

722
00:32:15,748 --> 00:32:18,890
你可以想使用几个不定类型就使用几个

723
00:32:18,890 --> 00:32:21,650
只是使用时注意要确定

724
00:32:21,650 --> 00:32:23,433
它们的类型就好

725
00:32:24,940 --> 00:32:27,690
OK，我把它们称作不定类型

726
00:32:27,690 --> 00:32:29,310
元素没有确立的数据类型

727
00:32:29,310 --> 00:32:31,843
它们的真实名称应当是类型参数

728
00:32:33,750 --> 00:32:36,710
最后一种我会讲的类型是函数

729
00:32:36,710 --> 00:32:39,120
函数也是类型

730
00:32:39,120 --> 00:32:42,450
函数可以作为一种类型

731
00:32:42,450 --> 00:32:47,020
并且其运用的语法简单直白

732
00:32:47,020 --> 00:32:51,070
这里有一些将函数用作类型的例子

733
00:32:51,070 --> 00:32:54,940
屏幕上黄色字体标出的就是一个类型

734
00:32:54,940 --> 00:32:59,940
你可以联想到 Int 或者 String 类型

735
00:33:00,000 --> 00:33:02,040
或者是 Int 组成的数组类型

736
00:33:02,040 --> 00:33:04,070
和那些类型一样

737
00:33:04,070 --> 00:33:05,320
这里也是一种类型

738
00:33:05,320 --> 00:33:09,320
所以这个类型指的就是
一个接受两个 Int 参数

739
00:33:09,320 --> 00:33:11,030
且返回值为 Bool 类型的函数

740
00:33:11,030 --> 00:33:12,240
就是这样的一种类型

741
00:33:12,240 --> 00:33:15,390
所以说
你可以将这个作为函数参数的类型

742
00:33:15,390 --> 00:33:18,290
这是一个接受 Double 参数

743
00:33:18,290 --> 00:33:20,230
且没有返回值的函数类型

744
00:33:20,230 --> 00:33:23,350
这是一个没有参数

745
00:33:23,350 --> 00:33:25,350
但返回由 String 组成的 Array 的函数类型

746
00:33:25,350 --> 00:33:28,290
这是一个没有参数

747
00:33:28,290 --> 00:33:30,400
且没有返回值的函数类型

748
00:33:30,400 --> 00:33:31,460
它们都是类型

749
00:33:31,460 --> 00:33:34,010
每个黄色字体标出的内容都只是类型

750
00:33:34,010 --> 00:33:37,300
没有什么特别的

751
00:33:37,300 --> 00:33:40,160
这意味着我可以声明一个这种类型的变量

752
00:33:40,160 --> 00:33:42,250
比如我可以创建一个变量命名为 foo

753
00:33:42,250 --> 00:33:45,400
它的类型可以是一个接受 Double 参数

754
00:33:45,400 --> 00:33:47,010
且没有返回值的函数类型

755
00:33:47,010 --> 00:33:48,420
或者我也可以创建一个函数

756
00:33:48,420 --> 00:33:52,310
名为 doSomething
它有一个名为 what 的参数

757
00:33:52,310 --> 00:33:55,510
参数的类型是一个没有参数
且返回值为 Bool 类型的函数

758
00:33:55,510 --> 00:33:58,920
想必是会在 doSomething 中

759
00:33:58,920 --> 00:34:01,580
执行 what 的内容

760
00:34:01,580 --> 00:34:05,130
我们再来看看如何使用函数类型

761
00:34:05,130 --> 00:34:07,830
这里有一个名为 operation 的变量

762
00:34:07,830 --> 00:34:10,730
它的类型是一个接受 Double 参数
并返回 Double 的函数

763
00:34:11,710 --> 00:34:15,180
我会创建一个函数

764
00:34:15,180 --> 00:34:16,780
使它接受 Double 参数
且返回值也是 Double 类型

765
00:34:16,780 --> 00:34:20,630
这个名为 square 的函数
有一个名为 operand 的 Double 类型参数

766
00:34:20,630 --> 00:34:22,750
求得 operand 的平方

767
00:34:22,750 --> 00:34:24,980
然后将其以 Double 类型返回

768
00:34:24,980 --> 00:34:27,400
这样一来

769
00:34:27,400 --> 00:34:29,670
我们可以将 square 赋值给 operation

770
00:34:29,670 --> 00:34:32,397
operation 是一个接受 Double 参数
并返回 Double 的函数类型

771
00:34:32,397 --> 00:34:34,250
所以它可以被赋值为 square

772
00:34:34,250 --> 00:34:36,790
square 是一个接受 Double 参数
且返回值也是 Double 类型的函数

773
00:34:36,790 --> 00:34:39,210
这样的代码合情合理

774
00:34:39,210 --> 00:34:42,100
现在我们就可以通过

775
00:34:42,100 --> 00:34:46,260
let result1 = operation(4)
来执行这个函数

776
00:34:46,260 --> 00:34:50,900
这样一来 result1 就会等于 16
也就是 4 的平方

777
00:34:50,900 --> 00:34:52,980
注意这里当我调用 operation 时

778
00:34:52,980 --> 00:34:56,030
我没有写出 operation(operand:

779
00:34:56,030 --> 00:34:58,870
这里的实参标签被忽略掉了

780
00:34:58,870 --> 00:35:01,190
这是通过函数类型调用函数情况下的

781
00:35:01,190 --> 00:35:06,190
常规用法
忽略实参标签

782
00:35:06,640 --> 00:35:08,070
不过我也可以在这里写

783
00:35:08,070 --> 00:35:09,660
operation = sqrt

784
00:35:09,660 --> 00:35:13,190
sqrt 是一个 Swift 内置函数

785
00:35:13,190 --> 00:35:15,390
它可以求出一个数的平方根

786
00:35:15,390 --> 00:35:17,240
它是接受一个 Double 参数

787
00:35:17,240 --> 00:35:18,480
并且返回值也是 Double 类型的函数

788
00:35:18,480 --> 00:35:20,430
所以这里我可以
把 sqrt 赋值给 operation

789
00:35:20,430 --> 00:35:23,563
现在如果我写出
let result2 = operation(4)

790
00:35:23,563 --> 00:35:24,873
result2 的值就会是 2

791
00:35:24,873 --> 00:35:27,450
因为我已经改变了 operation 的值

792
00:35:27,450 --> 00:35:29,140
它曾是 square 函数

793
00:35:29,140 --> 00:35:32,110
然后我把它赋值为了 sqrt 函数

794
00:35:32,110 --> 00:35:32,970
就是这么简单

795
00:35:32,970 --> 00:35:36,200
简单到难以置信

796
00:35:36,200 --> 00:35:38,280
但事实如此

797
00:35:38,280 --> 00:35:40,900
而在接下来的

798
00:35:40,900 --> 00:35:42,970
示例程序中

799
00:35:42,970 --> 00:35:44,658
我会创建我们自己的函数

800
00:35:44,658 --> 00:35:47,270
并将函数作为参数

801
00:35:47,270 --> 00:35:49,340
你将会听到闭包（Closure）之类的词汇

802
00:35:49,340 --> 00:35:51,410
而我将会在下周或下下周

803
00:35:51,410 --> 00:35:53,313
更详尽地谈到闭包

804
00:35:54,200 --> 00:35:57,430
闭包其实就是在代码中直接插入一个函数

805
00:35:57,430 --> 00:36:00,487
把作为参数函数的代码直接插入

806
00:36:00,487 --> 00:36:03,250
作为另一个函数的参数

807
00:36:03,250 --> 00:36:06,440
而非在另一处声明

808
00:36:06,440 --> 00:36:08,450
它比单纯地直接插入更胜一筹

809
00:36:08,450 --> 00:36:09,960
因为它有一些独到之处

810
00:36:09,960 --> 00:36:12,115
比如捕获本地变量

811
00:36:12,115 --> 00:36:14,240
我会在下周谈到这些

812
00:36:14,240 --> 00:36:16,100
但我现在就会用示例程序给你看看

813
00:36:16,100 --> 00:36:19,783
直接插入函数的语法

814
00:36:19,783 --> 00:36:20,913
接下来就会是这个内容

815
00:36:21,810 --> 00:36:25,580
我们今天的幻灯片到此为止

816
00:36:25,580 --> 00:36:27,660
以上就是我们所讨论的

817
00:36:27,660 --> 00:36:31,140
现在我们回到示例程序中

818
00:36:31,140 --> 00:36:34,890
接下来我们会在项目中试着讨论

819
00:36:34,890 --> 00:36:37,990
幻灯片中介绍到的所有内容

820
00:36:37,990 --> 00:36:40,490
需要记住的是
你们要在第一次作业中

821
00:36:40,490 --> 00:36:43,700
重写这个示例程序
务必登录 Piazza

822
00:36:43,700 --> 00:36:45,410
因为作业的相关内容

823
00:36:45,410 --> 00:36:48,283
已经随讲义一起发布在 Piazza

824
00:36:49,820 --> 00:36:53,160
现在让我们用 MVVM 架构
把这个记忆游戏 App

825
00:36:53,160 --> 00:36:58,160
进行改造升级
让这些卡片更聪明一些

826
00:36:58,510 --> 00:37:02,003
让这些卡片成为逻辑和数据

827
00:37:02,003 --> 00:37:03,510
我们该从何下手呢？

828
00:37:03,510 --> 00:37:05,350
到目前为止

829
00:37:05,350 --> 00:37:08,690
屏幕上看到的这些代码
都是在构建一个视图

830
00:37:08,690 --> 00:37:13,580
对应到 MVVM 中
就是其中的第一个字母“V”

831
00:37:13,580 --> 00:37:16,510
视图之后，我们接下来要学习的是模型

832
00:37:16,510 --> 00:37:19,260
需要再说一次的是，模型独立于 UI

833
00:37:19,260 --> 00:37:21,260
它不会知道这个记忆游戏

834
00:37:21,260 --> 00:37:23,130
是如何显示的

835
00:37:23,130 --> 00:37:26,820
每当我们要向 Xcode 中
添加新的 Swift 文件时

836
00:37:26,820 --> 00:37:30,763
我们都可以通过菜单 File
选中 New 下的 File 选项来新建

837
00:37:31,770 --> 00:37:34,470
这里有很多种可以创建的文件类型

838
00:37:34,470 --> 00:37:37,350
但实际上，可以归结为这两种

839
00:37:37,350 --> 00:37:40,890
选择这项会创建一个
新的 SwiftUI 视图，是吧？

840
00:37:40,890 --> 00:37:43,720
它会生成 struct xxx: View

841
00:37:43,720 --> 00:37:47,960
和 var body 所有这些的代码
这个则会创建一个我们

842
00:37:47,960 --> 00:37:50,480
现在所需的，不是 UI 类型的
Swift 空文件

843
00:37:50,480 --> 00:37:54,620
因为我们的模型并不是 UI 结构体

844
00:37:54,620 --> 00:37:56,360
所以我们双击它

845
00:37:56,360 --> 00:37:58,500
现在，它在问你想把它存储在哪里

846
00:37:58,500 --> 00:38:00,000
以及你想怎么命名它

847
00:38:00,000 --> 00:38:02,600
这个文件将成为我们这个
记忆游戏的核心文件

848
00:38:02,600 --> 00:38:05,440
所以我要给这个文件直接
命名为 MemoryGame

849
00:38:05,440 --> 00:38:08,230
因为我要在这个文件里
创建的最主要的结构体

850
00:38:08,230 --> 00:38:11,210
就是这个用来实现记忆游戏的

851
00:38:11,210 --> 00:38:12,910
MemoryGame 结构体

852
00:38:12,910 --> 00:38:15,190
下面还有另一个选项

853
00:38:15,190 --> 00:38:16,850
就是问你要把这个文件存放在哪里？

854
00:38:16,850 --> 00:38:20,810
这个黄色的和这里的黄色的是一样的

855
00:38:20,810 --> 00:38:25,120
这个蓝色的和这里的蓝色的是一样的

856
00:38:25,120 --> 00:38:28,690
我们通常不会
把文件存放在这个蓝色的里面

857
00:38:28,690 --> 00:38:30,650
我们会把它们放在这些文件夹中

858
00:38:30,650 --> 00:38:32,590
这些黄色文件夹

859
00:38:32,590 --> 00:38:34,840
另外，无论你在这里选择了哪个组

860
00:38:34,840 --> 00:38:36,570
都应该确保这个文件

861
00:38:36,570 --> 00:38:39,440
和诸如 ContentView 之类的文件
在文件系统中的位置相同

862
00:38:39,440 --> 00:38:41,230
你在此处看到了内容视图

863
00:38:41,230 --> 00:38:45,370
我们要确保这里就是我们所选择的位置

864
00:38:45,370 --> 00:38:47,280
我们来创建这个文件

865
00:38:47,280 --> 00:38:48,251
它就在那儿，对吧？

866
00:38:48,251 --> 00:38:49,084
MemoryGame

867
00:38:49,084 --> 00:38:50,900
注意到它没有导入 SwiftUI

868
00:38:50,900 --> 00:38:53,780
因为它不是 UI

869
00:38:53,780 --> 00:38:56,170
这里的 Foundation
我上次讲述过它

870
00:38:56,170 --> 00:38:59,580
它有 Array、Dictionary
String、Int、Bool

871
00:38:59,580 --> 00:39:00,680
以及所有基本类型

872
00:39:00,680 --> 00:39:02,900
但是没有 View、Text

873
00:39:02,900 --> 00:39:06,710
RoundedRectangle 或者
任何 UI 组件

874
00:39:06,710 --> 00:39:08,010
我们在这里创建一个 struct

875
00:39:08,010 --> 00:39:10,720
记住，结构体是我们
默认的数据结构

876
00:39:10,720 --> 00:39:12,427
我称它为 MemoryGame

877
00:39:13,510 --> 00:39:15,430
它没有冒号和 View

878
00:39:15,430 --> 00:39:17,250
因为它不会表现得像个 View

879
00:39:17,250 --> 00:39:20,490
它是非 UI 的

880
00:39:20,490 --> 00:39:24,080
当我创建一个作为模型的结构体

881
00:39:24,080 --> 00:39:26,630
顺便提下，模型可能不会
是像这里一样的结构体

882
00:39:26,630 --> 00:39:30,580
它可能是一个 SQL 数据库
或者与网络相关

883
00:39:30,580 --> 00:39:32,640
我可以从它们那里获取信息

884
00:39:32,640 --> 00:39:34,377
大多数时候

885
00:39:34,377 --> 00:39:37,760
一个结构体都会封装
这些行为

886
00:39:37,760 --> 00:39:39,110
它也可以是一个类

887
00:39:39,110 --> 00:39:41,350
在某些情形下

888
00:39:41,350 --> 00:39:44,000
模型可能是类

889
00:39:44,000 --> 00:39:46,250
但是我们默认使用结构体

890
00:39:46,250 --> 00:39:47,800
所以我们以

891
00:39:47,800 --> 00:39:49,703
默认的数据结构作为开始

892
00:39:51,000 --> 00:39:54,600
当我创建一个模型时
我总是会问自己

893
00:39:54,600 --> 00:39:56,350
这个模型是做什么的

894
00:39:56,350 --> 00:39:59,630
然后我看是否在这里
使用变量和函数

895
00:39:59,630 --> 00:40:04,000
能够真正描述模型做的事

896
00:40:04,000 --> 00:40:05,590
如此一来，当我思考
这个 MemoryGame

897
00:40:05,590 --> 00:40:07,480
一个卡片匹配的
记忆游戏

898
00:40:07,480 --> 00:40:09,720
我认为最重要的事就是

899
00:40:09,720 --> 00:40:11,290
要有一些卡片

900
00:40:11,290 --> 00:40:15,410
所以，我要用变量 cards 来表示卡片

901
00:40:15,410 --> 00:40:17,240
当然我们需要一个类型

902
00:40:17,240 --> 00:40:20,200
所以，我们打上冒号

903
00:40:20,200 --> 00:40:23,820
我们的卡片应该是一个 Array

904
00:40:23,820 --> 00:40:26,300
Array 是一种泛型

905
00:40:26,300 --> 00:40:29,440
这意味着，它有一个不确定类型

906
00:40:29,440 --> 00:40:31,410
在用 Array 的情况下

907
00:40:31,410 --> 00:40:35,330
这个类型是 Array 中包含元素的类型

908
00:40:35,330 --> 00:40:38,960
因此，在 Array 里，我们需要明确

909
00:40:38,960 --> 00:40:40,010
某种实实在在的类型

910
00:40:40,010 --> 00:40:43,750
所以在这里，我们需要编写类型 Card

911
00:40:43,750 --> 00:40:46,100
然后，我们来继续写 Card 结构体

912
00:40:46,100 --> 00:40:49,060
是某个结构体，而这个结构体

913
00:40:49,060 --> 00:40:52,230
将用来表示一张单独的卡片

914
00:40:52,230 --> 00:40:56,860
请注意，我把 Card 这个结构体
放在了这个结构体里

915
00:40:56,860 --> 00:40:58,750
因此，这个结构体的全称

916
00:40:58,750 --> 00:41:01,990
实际上是 MemoryGame.Card

917
00:41:01,990 --> 00:41:05,960
在结构体里面嵌套结构体

918
00:41:05,960 --> 00:41:08,250
通过命名空间让我们知道

919
00:41:08,250 --> 00:41:09,810
它不是纸牌

920
00:41:09,810 --> 00:41:11,420
或某种其他卡片

921
00:41:11,420 --> 00:41:14,243
这是 MemoryGame 的卡片
所以我们把它放在这里

922
00:41:14,243 --> 00:41:16,210
（这样做）有一些细微的好处

923
00:41:16,210 --> 00:41:19,370
等会你就会看到

924
00:41:19,370 --> 00:41:21,410
那么，MemoryGame 还需要什么呢

925
00:41:21,410 --> 00:41:23,410
除了一堆卡片

926
00:41:23,410 --> 00:41:25,270
它还应该有一个选择卡片的方法

927
00:41:25,270 --> 00:41:27,930
所以，在这里你将定义你的第一个

928
00:41:27,930 --> 00:41:31,650
Swift 函数
你可以用关键字 func 来做到这一点

929
00:41:31,650 --> 00:41:34,420
接下来，是函数的名字

930
00:41:34,420 --> 00:41:38,650
我们称之为 choose，然后给定参数

931
00:41:38,650 --> 00:41:41,500
在这里，你会选择一张卡片

932
00:41:41,500 --> 00:41:45,270
所以我会写一个 Card 参数

933
00:41:45,270 --> 00:41:47,800
注意好了，正如我们前面说到的

934
00:41:47,800 --> 00:41:52,350
几乎所有函数的实参都有标签

935
00:41:52,350 --> 00:41:56,040
这就确保了当调用者调用 choose 时

936
00:41:56,040 --> 00:41:57,810
可以清晰地知道它们调用 choose

937
00:41:57,810 --> 00:42:01,823
需要传入这里的 card 参数

938
00:42:03,130 --> 00:42:07,510
我们之后不得不打岔去这里面

939
00:42:07,510 --> 00:42:10,505
写好卡片配对游戏的逻辑

940
00:42:10,505 --> 00:42:13,000
但现在，我实际上只会

941
00:42:13,000 --> 00:42:14,940
用一条 print 语句

942
00:42:14,940 --> 00:42:17,640
print 是 Swift 里面一个非常好的函数

943
00:42:17,640 --> 00:42:20,260
它能打印一个字符串

944
00:42:20,260 --> 00:42:22,870
所以在这儿我打印的是一个空字符串

945
00:42:22,870 --> 00:42:26,780
但我也可以打印 card chosen:
（被选中的卡片是）

946
00:42:26,780 --> 00:42:31,780
然后，我想用某种方法
把这个卡片放在这儿

947
00:42:31,870 --> 00:42:34,240
在其他语言里面

948
00:42:34,240 --> 00:42:38,370
你可能会用 %s，然后把 card 放在这里

949
00:42:38,370 --> 00:42:39,910
但是在 Swift 里，不需要那样做

950
00:42:39,910 --> 00:42:42,020
当你想要在字符串中嵌入一些

951
00:42:42,020 --> 00:42:43,320
其他类型的东西的时候

952
00:42:43,320 --> 00:42:45,030
你可以写反斜杠

953
00:42:45,030 --> 00:42:47,150
左括号，右括号

954
00:42:47,150 --> 00:42:49,200
然后就可以放在这儿了

955
00:42:49,200 --> 00:42:51,150
只要它可以

956
00:42:51,150 --> 00:42:54,730
转成字符串，这就是可行的

957
00:42:54,730 --> 00:42:56,660
Swift 就是如此，好用到爆炸

958
00:42:56,660 --> 00:43:00,860
它几乎可以把任何（类型）转换成 String

959
00:43:00,860 --> 00:43:03,400
现在，这个结构体
没有任何的成员变量

960
00:43:03,400 --> 00:43:06,270
所以，它可能不会打印出什么来

961
00:43:06,270 --> 00:43:09,580
可能只会打印一个空的 Card 结构体

962
00:43:09,580 --> 00:43:11,990
但是，我们肯定会添加变量

963
00:43:11,990 --> 00:43:13,880
然后当我们打印选中的卡片时

964
00:43:13,880 --> 00:43:17,390
就会打印出其中变量的值

965
00:43:17,390 --> 00:43:19,230
只要其中的变量也可以

966
00:43:19,230 --> 00:43:20,150
被转换成字符串就行

967
00:43:20,150 --> 00:43:22,460
所以这是个非常强大的机制

968
00:43:22,460 --> 00:43:25,050
反斜杠 \，开括号 (，闭括号 )

969
00:43:25,050 --> 00:43:27,547
我鼓励你们使用 print 方法
它非常适合用来调试

970
00:43:27,547 --> 00:43:31,170
当东西发生改变时
你可以将它打印出来

971
00:43:31,170 --> 00:43:32,440
这非常的棒

972
00:43:32,440 --> 00:43:34,520
现在，这是非常简单的函数

973
00:43:34,520 --> 00:43:38,010
我们将在这一学期学习
各种各样的语法

974
00:43:38,010 --> 00:43:38,843
来实现函数

975
00:43:38,843 --> 00:43:41,280
例如，这个函数返回了一个值

976
00:43:41,280 --> 00:43:42,790
它看起来应该是这样，对吗？

977
00:43:42,790 --> 00:43:44,540
一个箭头说明

978
00:43:44,540 --> 00:43:46,850
从这个函数里返回的是一个字符串类型的值

979
00:43:46,850 --> 00:43:50,200
但我们的函数并不需要返回值
如果这里有其他的参数

980
00:43:50,200 --> 00:43:51,610
可能是 other 参数

981
00:43:51,610 --> 00:43:53,070
是一个 Int 类型或者其他类型

982
00:43:53,070 --> 00:43:56,573
这里可以有任意多个参数

983
00:43:58,670 --> 00:44:02,090
这就是我们整个 MemoryGame 了

984
00:44:02,090 --> 00:44:04,500
它只有一个选择卡片的功能

985
00:44:04,500 --> 00:44:07,460
但是很显然我们应该决定

986
00:44:07,460 --> 00:44:10,970
一张卡片的外观
一张卡片有什么重要的内容

987
00:44:10,970 --> 00:44:15,400
关于卡片有一件事我们是知道的

988
00:44:15,400 --> 00:44:17,653
就是卡片是否是面朝上的
因此我会写

989
00:44:17,653 --> 00:44:19,236
var isFaceUp: Bool

990
00:44:20,290 --> 00:44:21,770
我想，我还需要知道

991
00:44:21,770 --> 00:44:24,123
一张卡片是否被匹配了

992
00:44:25,060 --> 00:44:27,570
因此 isMatched 变量也拥有 Bool 类型

993
00:44:27,570 --> 00:44:31,000
一张卡片上还有什么呢？

994
00:44:31,000 --> 00:44:34,830
我猜还有卡片上的内容，对吗？

995
00:44:34,830 --> 00:44:36,810
所以，应该还有卡片上的内容

996
00:44:36,810 --> 00:44:38,500
这是一个变量

997
00:44:38,500 --> 00:44:42,220
我会将它命名为 content
但问题是

998
00:44:42,220 --> 00:44:45,720
这个变量的类型是什么？

999
00:44:45,720 --> 00:44:48,370
我可以想象构建一个有图片的

1000
00:44:48,370 --> 00:44:50,360
卡片游戏

1001
00:44:50,360 --> 00:44:53,160
很显然，我们也可以构建一个
有表情符号的卡片游戏

1002
00:44:53,160 --> 00:44:54,490
就是我们的卡片游戏

1003
00:44:54,490 --> 00:44:57,600
你可以构建一个有文字在上面的
卡片游戏

1004
00:44:57,600 --> 00:45:00,040
也许这是一个有数字的卡片游戏

1005
00:45:00,040 --> 00:45:04,310
所以这是一个 Int 类型还是 String 类型

1006
00:45:04,310 --> 00:45:07,305
还是某种图片？

1007
00:45:07,305 --> 00:45:12,305
似乎我们并不在乎到底是什么类型，对吧？

1008
00:45:12,480 --> 00:45:13,820
由于我们是在做一个记忆游戏

1009
00:45:13,820 --> 00:45:15,940
你可以在卡片上
放任何你想放的内容

1010
00:45:15,940 --> 00:45:18,900
我们在做独立于 UI 的游戏

1011
00:45:18,900 --> 00:45:22,540
所以我们不关心
卡片上是什么

1012
00:45:22,540 --> 00:45:25,770
所以我们不关心（具体类型）是什么

1013
00:45:25,770 --> 00:45:26,790
理解吗？

1014
00:45:26,790 --> 00:45:29,760
我称之为 CardContent

1015
00:45:29,760 --> 00:45:32,750
这是我刚编造的一个类型

1016
00:45:32,750 --> 00:45:35,050
当然，如果我定义一个
不确定的类型

1017
00:45:35,050 --> 00:45:38,830
我需要在这里写上 CardContent

1018
00:45:40,100 --> 00:45:43,520
来声明这是一个泛型

1019
00:45:43,520 --> 00:45:46,220
由于这里有一个不确定类型

1020
00:45:46,220 --> 00:45:48,650
所以如果你想使用 MemoryGame

1021
00:45:48,650 --> 00:45:51,470
那么你需要告诉我
具体是什么类型

1022
00:45:51,470 --> 00:45:55,750
现在，一旦我们要在
在游戏中使用这个模型

1023
00:45:55,750 --> 00:45:59,340
我们会写上 MemoryGame
尖括号里是 String

1024
00:45:59,340 --> 00:46:02,010
因为表情就是放在
字符串中的字符

1025
00:46:02,010 --> 00:46:04,250
所以我们用 <String>

1026
00:46:04,250 --> 00:46:07,210
将会定义 MemoryGame 的类型

1027
00:46:07,210 --> 00:46:09,850
这是一个很棒的
关于这类不关心具体类型业务的

1028
00:46:09,850 --> 00:46:11,680
的简单例子

1029
00:46:11,680 --> 00:46:15,040
因为 MemoryGame
的确不关心

1030
00:46:15,040 --> 00:46:16,503
卡片上是什么

1031
00:46:18,300 --> 00:46:20,690
好了，现在我们有了模型

1032
00:46:20,690 --> 00:46:22,490
以及这里的视图

1033
00:46:22,490 --> 00:46:27,300
接下来我们处理 MVVM 架构的
第三个部分，即视图模型

1034
00:46:27,300 --> 00:46:30,370
视图模型就像胶水一样

1035
00:46:30,370 --> 00:46:34,400
把这里所有独立于 UI 的内容

1036
00:46:34,400 --> 00:46:37,053
和这里所有 UI 相关内容粘合起来

1037
00:46:38,120 --> 00:46:40,210
再次通过 File 选择 New

1038
00:46:40,210 --> 00:46:43,584
我们创建一个新文件

1039
00:46:43,584 --> 00:46:46,560
这不是一个 SwiftUI View
它与 UI 有关

1040
00:46:46,560 --> 00:46:49,350
但又不是视图
它是视图模型

1041
00:46:49,350 --> 00:46:51,170
所以我们选择 Swift File

1042
00:46:51,170 --> 00:46:54,380
在这里为视图模型命名

1043
00:46:54,380 --> 00:46:56,333
我将它命名为 EmojiMemoryGame

1044
00:46:57,395 --> 00:46:58,228
因为这是一个
使用表情来绘制卡片

1045
00:47:01,020 --> 00:47:04,820
的具体类型的 MemoryGame

1046
00:47:04,820 --> 00:47:08,040
要确保 EmojiMemoryGame 文件
放在正确的目录中

1047
00:47:08,040 --> 00:47:09,828
跟其他文件放在同样的地方

1048
00:47:09,828 --> 00:47:11,380
太棒了

1049
00:47:11,380 --> 00:47:13,660
EmojiMemoryGame 创建好了

1050
00:47:13,660 --> 00:47:16,100
它导入了 Foundation

1051
00:47:16,100 --> 00:47:19,600
如果我想的话
也可以导入 SwiftUI

1052
00:47:19,600 --> 00:47:23,030
我不会在这里处理 UI 事务

1053
00:47:23,030 --> 00:47:26,988
所有 UI 都在 ContentView 中

1054
00:47:26,988 --> 00:47:31,860
但是视图模型实质上
也是一个 UI

1055
00:47:31,860 --> 00:47:32,693
因为它知道 UI 是怎样
被绘制到屏幕上的

1056
00:47:32,693 --> 00:47:35,343
实际上，视图模型的一部分作用

1057
00:47:39,090 --> 00:47:42,170
就是获取这些独立于 UI 的模型
例如 MemoryGame

1058
00:47:42,170 --> 00:47:45,750
翻译后以某种形式显示出来

1059
00:47:45,750 --> 00:47:49,870
在这个例子中
视图模型是 EmojiMemoryGame

1060
00:47:49,870 --> 00:47:52,600
在我们进入
这里的视图模型之前

1061
00:47:52,600 --> 00:47:55,140
让我们先通过这里的选项

1062
00:47:55,140 --> 00:47:56,340
隐藏这个预览视图

1063
00:47:56,340 --> 00:47:58,440
可以看到 Show Editor Only

1064
00:47:58,440 --> 00:47:59,450
好，隐藏了预览视图

1065
00:47:59,450 --> 00:48:02,610
你总是可以通过选择 Canvas
再把预览视图显示出来

1066
00:48:02,610 --> 00:48:04,073
好了，点击 Show Editor Only
再次隐藏预览视图

1067
00:48:05,180 --> 00:48:07,860
开始构建这里的 ViewModel

1068
00:48:07,860 --> 00:48:10,030
现在，有一件有趣的事

1069
00:48:10,030 --> 00:48:14,020
就是我会将 ViewModel
定义为一个类

1070
00:48:14,020 --> 00:48:15,720
命名为 EmojiMemoryGame

1071
00:48:17,740 --> 00:48:20,180
顺便提一下
它是一个面向对象的类

1072
00:48:20,180 --> 00:48:21,860
它可以有超类

1073
00:48:21,860 --> 00:48:24,300
像这样指定超类

1074
00:48:24,300 --> 00:48:28,380
但是我们的表情记忆游戏
没有超类

1075
00:48:28,380 --> 00:48:31,790
稍后我会解释
为什么这里是一个类

1076
00:48:31,790 --> 00:48:33,460
而不是结构体

1077
00:48:33,460 --> 00:48:37,150
让我们先想一下
视图模型是什么？

1078
00:48:37,150 --> 00:48:40,860
我们知道视图模型实质上是一个

1079
00:48:40,860 --> 00:48:42,360
视图与模型之间的入口

1080
00:48:42,360 --> 00:48:46,670
视图模型是等待视图
获取模型之“门”

1081
00:48:46,670 --> 00:48:50,020
所以，视图模型需要的

1082
00:48:50,020 --> 00:48:53,560
是某种类型的变量
以此来访问模型

1083
00:48:53,560 --> 00:48:57,020
现在，我称这个变量
为模型

1084
00:48:57,020 --> 00:49:01,020
你可能不会把任何变量
称为模型

1085
00:49:01,020 --> 00:49:03,090
因为“模型”是一个概念

1086
00:49:03,090 --> 00:49:05,830
但是这里我称之为模型
只是为了讲解的目的

1087
00:49:05,830 --> 00:49:09,250
你可能会将这个变量命名为
例如 game

1088
00:49:09,250 --> 00:49:11,400
更能描述它是什么的名称

1089
00:49:11,400 --> 00:49:13,190
这是个记忆游戏
所以你可以叫它 game

1090
00:49:13,190 --> 00:49:15,077
或者 memoryGame
或其他类似的名字

1091
00:49:15,077 --> 00:49:16,360
但这里我叫它 model

1092
00:49:16,360 --> 00:49:17,490
这样在之后的代码中

1093
00:49:17,490 --> 00:49:20,870
可以时刻提醒你它在访问模型

1094
00:49:20,870 --> 00:49:23,460
那么我们模型的类型是什么呢？

1095
00:49:23,460 --> 00:49:26,010
它是我们刚刚写好的

1096
00:49:26,010 --> 00:49:29,630
MemoryGame 结构体
这个泛型结构体

1097
00:49:29,630 --> 00:49:32,070
有一个不确定类型 CardContent

1098
00:49:32,070 --> 00:49:34,960
作为表情游戏中卡片的内容

1099
00:49:34,960 --> 00:49:38,160
显然，卡片的内容应该是字符串，对吧？

1100
00:49:38,160 --> 00:49:39,500
表情就是字符串

1101
00:49:39,500 --> 00:49:42,280
所以这个类型就是 MemoryGame

1102
00:49:42,280 --> 00:49:46,970
CardContent 是一个 String

1103
00:49:46,970 --> 00:49:49,470
很简单吧

1104
00:49:49,470 --> 00:49:54,350
现在我来介绍一下
为什么 EmojiMemoryGame 是一个类

1105
00:49:54,350 --> 00:49:57,350
可能我需要在视图模型和模型之间

1106
00:49:57,350 --> 00:50:00,470
做一个类比

1107
00:50:00,470 --> 00:50:03,710
这会帮助我们理解它们是如何交互的

1108
00:50:03,710 --> 00:50:08,410
对于一个类来说，它最大的好处

1109
00:50:08,410 --> 00:50:13,350
就是它便于分享
因为类保存在堆中

1110
00:50:13,350 --> 00:50:14,560
并且有指向它的指针

1111
00:50:14,560 --> 00:50:17,970
你们之前做面向对象编程的时候
就是这么干的

1112
00:50:17,970 --> 00:50:20,210
因为它保存在堆中，还有指针

1113
00:50:20,210 --> 00:50:23,430
所以所有的视图都可以指向同一个实例

1114
00:50:23,430 --> 00:50:26,240
当我们开始构建复杂的用户界面的时候

1115
00:50:26,240 --> 00:50:28,850
我们会有很多视图
并且其中有不少视图

1116
00:50:28,850 --> 00:50:31,530
会使用这个入口

1117
00:50:31,530 --> 00:50:33,817
一个通向模型的入口

1118
00:50:33,817 --> 00:50:35,950
你可以通过它来

1119
00:50:35,950 --> 00:50:37,147
访问模型

1120
00:50:37,147 --> 00:50:38,560
并且视图可以分享这个入口

1121
00:50:38,560 --> 00:50:42,490
所以在这里使用类是很合适的

1122
00:50:42,490 --> 00:50:44,140
因为它便于和其他视图分享

1123
00:50:44,140 --> 00:50:45,950
它们都有一个指针

1124
00:50:45,950 --> 00:50:49,030
指向同一个模型的入口

1125
00:50:49,030 --> 00:50:53,020
但是正如很多其他事情一样
类最大的优点

1126
00:50:53,020 --> 00:50:56,130
同时也是它最大的弱点

1127
00:50:56,130 --> 00:50:58,140
当有很多不同的人

1128
00:50:58,140 --> 00:51:02,260
都指向同一个视图模型的时候
问题就出现了

1129
00:51:02,260 --> 00:51:05,460
因为只要任何一个人把它搞砸了

1130
00:51:05,460 --> 00:51:07,880
它就会毁掉所有人的派对

1131
00:51:07,880 --> 00:51:10,490
特别是在这种情况下

1132
00:51:10,490 --> 00:51:12,100
这是我的一个类比

1133
00:51:12,100 --> 00:51:15,680
想象这里有一个房子

1134
00:51:15,680 --> 00:51:19,120
我们所有的视图都住在房子里面

1135
00:51:19,120 --> 00:51:22,920
然后这个视图模型 EmojiMemoryGame

1136
00:51:22,920 --> 00:51:26,170
是房子的前门

1137
00:51:26,170 --> 00:51:28,773
因为视图模型是

1138
00:51:28,773 --> 00:51:30,860
视图访问模型的入口

1139
00:51:30,860 --> 00:51:33,530
然后模型是外部世界

1140
00:51:33,530 --> 00:51:35,700
所有房子之外的地方都是模型

1141
00:51:35,700 --> 00:51:37,350
我们所有住在房子里视图

1142
00:51:37,350 --> 00:51:39,140
都需要通过入口往外看

1143
00:51:39,140 --> 00:51:40,110
并且它们共用同一个入口

1144
00:51:40,110 --> 00:51:40,943
它们都住在房子里

1145
00:51:40,943 --> 00:51:41,973
都通过同一个入口向外看

1146
00:51:41,973 --> 00:51:43,950
都有指向同一个入口的指针

1147
00:51:43,950 --> 00:51:45,910
你可以这么想
它们都挤在一起

1148
00:51:45,910 --> 00:51:47,750
一起向外看，这是一件好事

1149
00:51:47,750 --> 00:51:50,420
因为它们用同一个方式通过同一个入口

1150
00:51:50,420 --> 00:51:53,100
观测外部世界

1151
00:51:53,100 --> 00:51:55,810
这样的好处是
我们的 UI 永远都会自我保持一致

1152
00:51:55,810 --> 00:51:58,320
它们看到的都是一样的东西

1153
00:51:58,320 --> 00:52:01,520
但是这样做有一个大问题

1154
00:52:01,520 --> 00:52:03,530
那就是它是房门大开的

1155
00:52:03,530 --> 00:52:04,860
入口是开着的

1156
00:52:04,860 --> 00:52:07,390
它有一个 model 变量

1157
00:52:07,390 --> 00:52:10,220
任何的视图可以通过它

1158
00:52:10,220 --> 00:52:14,220
找到一张卡片

1159
00:52:14,220 --> 00:52:17,580
然后把卡片设定成已被选中

1160
00:52:17,580 --> 00:52:20,640
这真的会搞砸我们的游戏

1161
00:52:20,640 --> 00:52:22,810
为什么这会搞砸我们的游戏呢？

1162
00:52:22,810 --> 00:52:24,980
可能我们的游戏会记录分数

1163
00:52:24,980 --> 00:52:26,760
当卡片配对时

1164
00:52:26,760 --> 00:52:28,220
它会给你加分或其他奖励

1165
00:52:28,220 --> 00:52:29,727
如果你仅仅是找到这张卡片

1166
00:52:29,727 --> 00:52:31,440
然后把它设定成“已经配对”

1167
00:52:31,440 --> 00:52:34,060
这会导致在你的分数
没有发生改变的情况下

1168
00:52:34,060 --> 00:52:36,480
出现卡片被标记成已配对的情况

1169
00:52:36,480 --> 00:52:39,770
所以本质上来说，一个调皮的坏视图

1170
00:52:39,770 --> 00:52:43,250
会毁掉整个游戏
因为所有其他视图

1171
00:52:43,250 --> 00:52:44,730
都在观测同一个模型

1172
00:52:44,730 --> 00:52:48,610
所以你看，公开的模型的入口

1173
00:52:48,610 --> 00:52:50,837
也就是视图模型，是个类

1174
00:52:50,837 --> 00:52:54,420
它的共享特性是一件危险的事情

1175
00:52:54,420 --> 00:52:56,180
但是对于这件事

1176
00:52:56,180 --> 00:53:00,370
我们并非没有办法

1177
00:53:00,370 --> 00:53:03,530
在保持共享性这种优势的基础上

1178
00:53:03,530 --> 00:53:05,500
来减轻这种令人担忧的风险

1179
00:53:05,500 --> 00:53:08,270
其中一种方法是把门关上

1180
00:53:08,270 --> 00:53:12,730
如果我们给这个变量
加上 private 关键字

1181
00:53:12,730 --> 00:53:15,930
这就意味着 model 这个变量

1182
00:53:15,930 --> 00:53:19,810
现在只能被 EmojiMemoryGame 访问

1183
00:53:19,810 --> 00:53:22,700
它是类的私有变量

1184
00:53:22,700 --> 00:53:26,500
这种方法解决了调皮的视图

1185
00:53:26,500 --> 00:53:29,390
可以直接设定卡片配对属性的问题

1186
00:53:29,390 --> 00:53:31,390
但是它有点用力过猛了

1187
00:53:31,390 --> 00:53:34,560
因为现在没有任何一个视图
能够看到门的外面了

1188
00:53:34,560 --> 00:53:36,570
任何视图都不能再访问模型了

1189
00:53:36,570 --> 00:53:40,010
门关上了，所以视图无法

1190
00:53:40,010 --> 00:53:42,460
看到外面的世界了

1191
00:53:42,460 --> 00:53:46,540
所以显然这是个问题

1192
00:53:46,540 --> 00:53:50,180
那么我们怎么才能折中一下呢？

1193
00:53:50,180 --> 00:53:51,630
有一种方法是

1194
00:53:51,630 --> 00:53:53,670
用一种不同的 private

1195
00:53:53,670 --> 00:53:56,120
叫做 private(set)

1196
00:53:56,120 --> 00:53:58,010
如果我们写 private(set)

1197
00:53:58,010 --> 00:54:00,900
它本质上类似于把门关上了

1198
00:54:00,900 --> 00:54:03,980
但是这是一扇玻璃门

1199
00:54:03,980 --> 00:54:07,180
private(set) 意思是只有
EmojiMemoryGame

1200
00:54:07,180 --> 00:54:10,610
可以修改模型，但是其他人

1201
00:54:10,610 --> 00:54:12,300
依然能访问模型

1202
00:54:12,300 --> 00:54:14,720
所以这是个玻璃门

1203
00:54:14,720 --> 00:54:17,810
这扇玻璃门可以很好地阻止

1204
00:54:17,810 --> 00:54:19,690
调皮的视图跑到模型中

1205
00:54:19,690 --> 00:54:21,850
改变卡片的配对状态

1206
00:54:21,850 --> 00:54:23,440
但分数并没有被改变这种情况的发生

1207
00:54:23,440 --> 00:54:25,850
它修正了这个问题

1208
00:54:25,850 --> 00:54:27,600
但是现在依然没有人能选择卡片

1209
00:54:27,600 --> 00:54:29,040
因为我们不能穿过

1210
00:54:29,040 --> 00:54:33,400
视图不能穿过玻璃门来选择卡片

1211
00:54:33,400 --> 00:54:34,880
例如视图的主要工作之一

1212
00:54:34,880 --> 00:54:37,470
就是检测用户手指点按

1213
00:54:37,470 --> 00:54:38,687
来选择卡片

1214
00:54:38,687 --> 00:54:41,580
这里我们就需要引入意图了

1215
00:54:41,580 --> 00:54:45,018
记住，当我们谈到视图模型时

1216
00:54:45,018 --> 00:54:48,460
它的工作之一是解释用户意图

1217
00:54:48,460 --> 00:54:49,580
也就是刚刚我提到的事情

1218
00:54:49,580 --> 00:54:51,560
我这里写一点注释

1219
00:54:51,560 --> 00:54:55,497
// MARK: - Intent
或者 Intents

1220
00:54:55,497 --> 00:54:56,920
还是写 Intent(s) 吧

1221
00:54:56,920 --> 00:55:00,390
这里我准备提供一些函数来

1222
00:55:00,390 --> 00:55:04,400
允许视图访问外部世界

1223
00:55:04,400 --> 00:55:07,810
比方说，你可以想象这是个高科技门

1224
00:55:07,810 --> 00:55:10,800
它有一个可视门铃对讲系统之类的东西

1225
00:55:10,800 --> 00:55:13,530
视图会按下对讲机按钮

1226
00:55:13,530 --> 00:55:14,817
来与外部世界沟通

1227
00:55:14,817 --> 00:55:17,347
它会说：“请选择这张卡片，好吗？”

1228
00:55:17,347 --> 00:55:20,480
然后视图模型，也就是这道门

1229
00:55:20,480 --> 00:55:23,730
它可以直接和模型沟通

1230
00:55:23,730 --> 00:55:26,180
告诉模型要做什么
通过这样来实现

1231
00:55:26,180 --> 00:55:29,190
所以用户意图有点像

1232
00:55:29,190 --> 00:55:31,890
视图与对讲机通话这件事

1233
00:55:31,890 --> 00:55:34,800
视图希望游戏发生的事情

1234
00:55:34,800 --> 00:55:37,680
显然我们需要做的一件事是
写一个函数

1235
00:55:37,680 --> 00:55:40,240
叫做 choose(card:)

1236
00:55:40,240 --> 00:55:42,730
这跟模型中那个函数一样

1237
00:55:42,730 --> 00:55:45,690
这是一个意图
用户可能想选择一个卡片

1238
00:55:45,690 --> 00:55:48,890
这里的 Card

1239
00:55:48,890 --> 00:55:50,820
我们必须写上它的全名

1240
00:55:50,820 --> 00:55:55,740
MemoryGame<String>.Card

1241
00:55:55,740 --> 00:55:57,217
是它的类型全称

1242
00:55:57,217 --> 00:55:59,350
也是它类型的所有部分

1243
00:55:59,350 --> 00:56:01,350
然后 choose 方法将很容易被实现

1244
00:56:01,350 --> 00:56:05,060
我们将让模型要去
选择这个 Card

1245
00:56:05,060 --> 00:56:07,760
幸运的是我们的模型刚好有

1246
00:56:07,760 --> 00:56:09,810
我们想要的 choose 函数

1247
00:56:09,810 --> 00:56:11,840
但是需要记得，我们的模型

1248
00:56:11,840 --> 00:56:13,667
它可能是 SQL 数据库或者
其他事物

1249
00:56:13,667 --> 00:56:16,740
然后我们应该在这里执行
一些 SQL 命令

1250
00:56:16,740 --> 00:56:20,960
使得用户的这类意图

1251
00:56:20,960 --> 00:56:22,580
能够被完成

1252
00:56:22,580 --> 00:56:26,390
当然，这是个简单的
刚开始的示例应用

1253
00:56:26,390 --> 00:56:28,870
所以很幸运，我们可以
容易地表达

1254
00:56:28,870 --> 00:56:33,870
用户的意图

1255
00:56:33,980 --> 00:56:36,450
这样就做好了

1256
00:56:36,450 --> 00:56:38,470
很好的是，我们有 private(set)

1257
00:56:38,470 --> 00:56:42,020
因此我们能看到卡片
我们能查看模型的卡片

1258
00:56:42,020 --> 00:56:45,220
并且我们能表达我们的意图
去改变这个世界

1259
00:56:45,220 --> 00:56:48,080
因此我们有了这扇门
它是玻璃的，我们能通过它向外看

1260
00:56:48,080 --> 00:56:50,570
它正在保护我们不受
外界影响

1261
00:56:50,570 --> 00:56:53,500
但是我们可能想限制更多

1262
00:56:53,500 --> 00:56:56,610
比如，我们真想关闭那扇门

1263
00:56:56,610 --> 00:56:59,335
不是通过玻璃门来向外看

1264
00:56:59,335 --> 00:57:03,380
而是使用视频门铃

1265
00:57:03,380 --> 00:57:04,870
你知道视频门铃如何工作吧

1266
00:57:04,870 --> 00:57:07,420
人们来到门前，你能从

1267
00:57:07,420 --> 00:57:08,900
小块视频屏幕中看到他们

1268
00:57:08,900 --> 00:57:12,080
因此这一小块视频屏幕比喻的是

1269
00:57:12,080 --> 00:57:14,900
我们提供的变量和函数

1270
00:57:14,900 --> 00:57:19,860
以便人们通过限制的方式查看模型

1271
00:57:19,860 --> 00:57:22,324
现在我们想人们能看到

1272
00:57:22,324 --> 00:57:23,790
在模型中的卡片

1273
00:57:23,790 --> 00:57:27,000
因此或许我将创建自己的
卡片变量，是吧？

1274
00:57:27,000 --> 00:57:31,923
它也是 MemoryGame<String>.Card
的数组

1275
00:57:37,870 --> 00:57:41,730
并且它将仅返回模型的卡片

1276
00:57:41,730 --> 00:57:43,270
这里同样地

1277
00:57:43,270 --> 00:57:46,070
这个模型很简单，所以
很容易拿到卡片

1278
00:57:46,070 --> 00:57:49,897
但是视图模型可能在这里
做一些解释

1279
00:57:49,897 --> 00:57:53,170
可能是将模型中的数据转换为

1280
00:57:53,170 --> 00:57:57,670
更容易被视图使用的数据

1281
00:57:57,670 --> 00:57:59,600
也可能是必须做某些工作

1282
00:57:59,600 --> 00:58:01,870
比如这些数据，这个模型是

1283
00:58:01,870 --> 00:58:03,230
来自于网络的

1284
00:58:03,230 --> 00:58:05,140
然后它必须发出网络请求

1285
00:58:05,140 --> 00:58:06,600
或类似的事情

1286
00:58:06,600 --> 00:58:09,960
但如果我们在增加一些复杂度之间做出选择

1287
00:58:09,960 --> 00:58:13,360
在视图模型里处理数据

1288
00:58:13,360 --> 00:58:15,340
会让视图更简洁

1289
00:58:15,340 --> 00:58:17,260
我们总是朝着这个方向做出权衡

1290
00:58:17,260 --> 00:58:19,770
我们希望我们的视图尽可能的简单

1291
00:58:19,770 --> 00:58:22,050
因此以视图易于使用的方式

1292
00:58:22,050 --> 00:58:25,330
将模型呈现给视图

1293
00:58:25,330 --> 00:58:29,380
确实是视图模型工作的一部分

1294
00:58:29,380 --> 00:58:31,750
当然了，这是个只有一行的 return 语句

1295
00:58:31,750 --> 00:58:33,803
所以这里也就不需要 return 了

1296
00:58:35,170 --> 00:58:36,003
所以，没有任何问题

1297
00:58:36,003 --> 00:58:38,750
在这种情况下
我们就拥有了一个完全私有的“门”

1298
00:58:38,750 --> 00:58:43,470
完全关闭的“门”
还有可以让它们在这里使用“对讲机”

1299
00:58:43,470 --> 00:58:45,877
这个好用的功能

1300
00:58:45,877 --> 00:58:50,710
所以我可以把这个标记命名为

1301
00:58:51,610 --> 00:58:53,510
获取模型

1302
00:58:53,510 --> 00:58:55,410
这些是可以访问模型变量的

1303
00:58:55,410 --> 00:58:57,310
函数和变量

1304
00:58:57,310 --> 00:58:58,840
而这个则是意图

1305
00:58:58,840 --> 00:59:01,630
顺便说一下这个 // MARK
我之所以这么写

1306
00:59:01,630 --> 00:59:03,730
是因为当你看这里的时候

1307
00:59:03,730 --> 00:59:05,234
它会告诉你是什么出现在这里

1308
00:59:05,234 --> 00:59:09,030
它显示的实际上就是
当前正在展示的代码

1309
00:59:09,030 --> 00:59:11,470
和那些小标记

1310
00:59:11,470 --> 00:59:13,694
而 // MARK 们就恰恰可以

1311
00:59:13,694 --> 00:59:17,810
给这些函数名和变量名组成的列表
提供漂亮标题

1312
00:59:18,700 --> 00:59:23,700
我更倾向于

1313
00:59:24,220 --> 00:59:27,250
使用这种“非玻璃门”的更封闭的方式

1314
00:59:27,250 --> 00:59:29,760
但有时候

1315
00:59:29,760 --> 00:59:32,200
使用 private(set) 来让其他代码

1316
00:59:32,200 --> 00:59:34,840
能够透过“玻璃门”直接访问模型是合理的

1317
00:59:34,840 --> 00:59:36,500
但无论如何你都应该把所有的意图
都明确地写出来

1318
00:59:36,500 --> 00:59:38,460
这其实就像说明书一样

1319
00:59:38,460 --> 00:59:40,760
它让所有的视图都知道

1320
00:59:40,760 --> 00:59:42,290
也让所有编写视图的代码的人知道

1321
00:59:42,290 --> 00:59:45,273
可以执行这些操作来修改模型

1322
00:59:46,500 --> 00:59:50,090
这里的错误是什么？

1323
00:59:50,090 --> 00:59:54,120
EmojiMemoryGame 这个类没有构造器

1324
00:59:54,120 --> 00:59:55,270
这是什么意思？

1325
00:59:55,270 --> 00:59:57,165
我们已经学过构造器了

1326
00:59:57,165 --> 00:59:58,520
还记得是什么吗？

1327
00:59:58,520 --> 01:00:01,760
这个报错表示

1328
01:00:01,760 --> 01:00:04,700
在一个类里面有变量未被初始化

1329
01:00:04,700 --> 01:00:06,640
实际上

1330
01:00:06,640 --> 01:00:09,530
这个变量，也就是这个模型变量

1331
01:00:09,530 --> 01:00:11,420
虽然确定了类型，但是没有初始值

1332
01:00:11,420 --> 01:00:14,422
需要设置为等于此处的值

1333
01:00:14,422 --> 01:00:17,930
以满足 Swift 中

1334
01:00:17,930 --> 01:00:21,580
初始化所有变量的要求

1335
01:00:21,580 --> 01:00:24,050
那么我们该如何初始化呢？

1336
01:00:24,050 --> 01:00:25,490
我们需要做的

1337
01:00:25,490 --> 01:00:29,050
就是输入 MemoryGame<String>

1338
01:00:29,050 --> 01:00:31,430
然后在小括号里

1339
01:00:31,430 --> 01:00:35,810
我们会再给它提供一些参数什么的

1340
01:00:35,810 --> 01:00:38,110
这里有一个小写的 cards,

1341
01:00:38,110 --> 01:00:41,970
我们可以双击卡片这一行
因为此处正好需要卡片参数

1342
01:00:41,970 --> 01:00:43,130
它为什么需要卡片参数呢？

1343
01:00:43,130 --> 01:00:46,030
可以在 MemoryGame 这个结构体里看到

1344
01:00:46,030 --> 01:00:48,980
它也有一个未初始化的变量

1345
01:00:48,980 --> 01:00:51,030
那这是怎么回事呢？

1346
01:00:51,030 --> 01:00:53,420
也就是说

1347
01:00:53,420 --> 01:00:56,173
如果你想创建这个模型

1348
01:00:57,314 --> 01:00:58,430
那就必须给这个卡片参数赋值

1349
01:00:58,430 --> 01:01:00,274
这和我们在这里遇到的情况是一样的

1350
01:01:00,274 --> 01:01:01,730
当我们用到 CardView 的
isFaceUp 时

1351
01:01:02,780 --> 01:01:06,700
也是需要满足未初始化的这个要求的

1352
01:01:06,700 --> 01:01:10,153
所以只要你在这里
声明了这些没有初始化的变量

1353
01:01:10,153 --> 01:01:13,610
那么这些变量就需要在创建的时候初始化
这也就是模型创建这里

1354
01:01:13,610 --> 01:01:15,260
为什么需要这么写的原因

1355
01:01:15,260 --> 01:01:19,920
但实际上现在这么写是有问题的

1356
01:01:19,920 --> 01:01:22,160
因为 EmojiMemoryGame 这个类

1357
01:01:22,160 --> 01:01:25,390
它并没有真正想去创建卡片

1358
01:01:25,390 --> 01:01:29,390
更没有想要去做
诸如设置正反面或者配对这类的操作

1359
01:01:29,390 --> 01:01:32,590
因为这完全应该

1360
01:01:32,590 --> 01:01:35,820
由 MemoryGame 来决定哪张卡片是正面
哪张卡片是反面

1361
01:01:35,820 --> 01:01:38,700
因此，实际上是 MemoryGame 本身

1362
01:01:38,700 --> 01:01:41,540
想要在这里初始化这些卡片

1363
01:01:41,540 --> 01:01:43,097
这就好比在这里输入一个等号

1364
01:01:43,097 --> 01:01:45,160
然后在后面输入相关的内容

1365
01:01:45,160 --> 01:01:47,430
但是这样的话还是会有点问题

1366
01:01:47,430 --> 01:01:48,980
因为它实际上有一些问题需要明确

1367
01:01:48,980 --> 01:01:52,730
例如这个游戏中具体有多少张卡片？

1368
01:01:52,730 --> 01:01:56,030
我们需要在视图模型创建模型时

1369
01:01:56,030 --> 01:01:59,615
把卡片的具体数量

1370
01:01:59,615 --> 01:02:03,350
传给 MemoryGame

1371
01:02:03,350 --> 01:02:06,120
我们具体要操作的地方就是这里

1372
01:02:06,120 --> 01:02:08,450
与其通过给 MemoryGame 模型

1373
01:02:08,450 --> 01:02:11,420
初始化卡片数组

1374
01:02:11,420 --> 01:02:14,510
不如我们通过输入创建多少对卡片的方式

1375
01:02:14,510 --> 01:02:17,990
来创建 MemoryGame 模型

1376
01:02:17,990 --> 01:02:22,383
两对、五对、六对甚至任意对数量的卡片

1377
01:02:23,880 --> 01:02:26,930
然后这个 MemoryGame 模型会说

1378
01:02:26,930 --> 01:02:31,930
没问题，我会创建这么多成对的卡片

1379
01:02:32,470 --> 01:02:35,110
而且还会把它们的参数都设定好

1380
01:02:35,110 --> 01:02:38,460
这里最重要的是

1381
01:02:38,460 --> 01:02:42,810
我们没有直接用卡片来当参数

1382
01:02:42,810 --> 01:02:47,150
而是用了其他类型的任意参数

1383
01:02:47,150 --> 01:02:49,550
来创建 MemoryGame<String> 里的卡片

1384
01:02:49,550 --> 01:02:51,780
这是一种很常用的形式

1385
01:02:51,780 --> 01:02:55,840
这个方式就是 init

1386
01:02:55,840 --> 01:02:59,880
我们转到这里，在这里添加一个新的函数

1387
01:02:59,880 --> 01:03:02,570
你不需要输入 func init，对吧？

1388
01:03:02,570 --> 01:03:04,240
你只需输入 init 即可

1389
01:03:04,240 --> 01:03:07,240
因为 init 的定义本就是函数

1390
01:03:07,240 --> 01:03:09,930
然后传入想要的参数就行

1391
01:03:09,930 --> 01:03:13,260
我们需要参数 numberOfPairsOfCards

1392
01:03:13,260 --> 01:03:15,367
它的类型是 Int，是吧？

1393
01:03:15,367 --> 01:03:16,473
且无需返回值

1394
01:03:16,473 --> 01:03:20,690
因为构造器（init 函数）
是用来初始化所有变量的

1395
01:03:20,690 --> 01:03:23,430
令人赞叹的是

1396
01:03:23,430 --> 01:03:25,800
你可以创建多个构造器

1397
01:03:25,800 --> 01:03:27,980
每个构造器可以有不同的参数

1398
01:03:27,980 --> 01:03:31,870
如果还有其他创建 MemoryGame 的方式

1399
01:03:31,870 --> 01:03:36,870
我们就可以创建不同的构造器

1400
01:03:37,210 --> 01:03:38,960
这在之前的课程里遇到过

1401
01:03:38,960 --> 01:03:41,670
回顾一下 RoundedRectangle

1402
01:03:41,670 --> 01:03:44,000
当我们创建一个 RoundedRectangle

1403
01:03:44,000 --> 01:03:45,140
输入左括号

1404
01:03:45,140 --> 01:03:47,600
就能看到这里有四种不同的方式

1405
01:03:47,600 --> 01:03:49,490
创建 RoundedRectangle

1406
01:03:49,490 --> 01:03:52,390
一种是通过圆角半径
一种是通过圆角尺寸

1407
01:03:52,390 --> 01:03:54,110
另外还有通过某种样式

1408
01:03:54,110 --> 01:03:56,750
所以这是四个不同的构造器

1409
01:03:56,750 --> 01:03:58,160
参数各不相同

1410
01:03:58,160 --> 01:04:02,810
它们都能用来创建 RoundedRectangle

1411
01:04:02,810 --> 01:04:05,150
这恰好跟我们的场景相同

1412
01:04:05,150 --> 01:04:07,930
在我们的示例中只有一个构造器

1413
01:04:09,220 --> 01:04:11,150
在构造器中需要做些什么呢？

1414
01:04:11,150 --> 01:04:14,010
要用它初始化所有的变量

1415
01:04:14,010 --> 01:04:17,389
因为使用 MemoryGame 实例时

1416
01:04:17,389 --> 01:04:21,580
它的变量都需要初始化

1417
01:04:21,580 --> 01:04:23,100
我们现在就来实现它

1418
01:04:23,100 --> 01:04:25,710
首先创建一个空数组

1419
01:04:25,710 --> 01:04:27,810
存放卡片

1420
01:04:27,810 --> 01:04:29,450
卡片存在 Array<Card> 中

1421
01:04:29,450 --> 01:04:34,040
输入 cards = Array<Card>

1422
01:04:34,040 --> 01:04:35,940
后接左括号和右括号

1423
01:04:35,940 --> 01:04:39,350
也就是说，如果它有无参数的构造器
就调用这个构造器

1424
01:04:39,350 --> 01:04:42,540
如果作用在 Array 上

1425
01:04:42,540 --> 01:04:43,980
就创建了一个空数组

1426
01:04:43,980 --> 01:04:47,770
现在卡片是一个
以 Card 为元素类型的空数组

1427
01:04:47,770 --> 01:04:51,480
这满足了初始化的需求

1428
01:04:51,480 --> 01:04:52,790
当然这还不够

1429
01:04:52,790 --> 01:04:56,620
我们需要创建这么多对卡片

1430
01:04:56,620 --> 01:04:58,820
再把它们存入数组中

1431
01:04:58,820 --> 01:05:01,330
为了实现它，我们需要一个 for 循环

1432
01:05:01,330 --> 01:05:05,143
这是你在 Swift 中
第一次碰到 for 循环

1433
01:05:05,143 --> 01:05:08,520
输入 for 和一个迭代变量

1434
01:05:08,520 --> 01:05:10,270
称之为 pairIndex

1435
01:05:10,270 --> 01:05:13,520
在 for 循环中遍历每对卡片的序号

1436
01:05:13,520 --> 01:05:14,725
然后输入 in

1437
01:05:14,725 --> 01:05:17,190
所以 for in 是 for 循环的书写格式

1438
01:05:17,190 --> 01:05:18,970
它是 Swift 中唯一的 for 循环方式

1439
01:05:18,970 --> 01:05:22,590
接下来输入一个可迭代的内容

1440
01:05:22,590 --> 01:05:23,580
我们之前学过的

1441
01:05:23,580 --> 01:05:25,650
它可以是任意可迭代的内容

1442
01:05:25,650 --> 01:05:27,570
通常是一个数组，对吧？

1443
01:05:27,570 --> 01:05:30,530
在这个示例中我仍然用一个区间

1444
01:05:30,530 --> 01:05:34,070
像之前这里一样

1445
01:05:34,070 --> 01:05:36,360
所以区间是可迭代的

1446
01:05:36,360 --> 01:05:39,150
数组也是可迭代的

1447
01:05:39,150 --> 01:05:42,220
但是这里我要用一个区间

1448
01:05:42,220 --> 01:05:45,870
从 0 到卡片对数，但不包括上限

1449
01:05:45,870 --> 01:05:47,710
这就是 for 循环的实现方式

1450
01:05:47,710 --> 01:05:51,410
从 0 开始，到 1，再到 2

1451
01:05:51,410 --> 01:05:54,130
一直到等于卡片对数之前

1452
01:05:54,130 --> 01:05:56,360
所以如果要两对卡片

1453
01:05:56,360 --> 01:05:58,720
就从 0 开始遍历，到 1

1454
01:05:58,720 --> 01:06:01,410
2 不小于 2

1455
01:06:01,410 --> 01:06:03,570
所以停止遍历

1456
01:06:03,570 --> 01:06:06,040
每次遍历需要添加两张卡片

1457
01:06:06,040 --> 01:06:09,820
调用卡片数组的 append 方法

1458
01:06:09,820 --> 01:06:13,390
append 是 Array 的一个方法

1459
01:06:13,390 --> 01:06:16,229
可以实现向数组中添加卡片

1460
01:06:16,229 --> 01:06:20,160
这里我给数组添加某种卡片

1461
01:06:21,334 --> 01:06:23,350
之后再细究具体怎么写

1462
01:06:23,350 --> 01:06:25,930
然后再添加一张卡片

1463
01:06:25,930 --> 01:06:27,880
凑成一对卡片

1464
01:06:27,880 --> 01:06:29,900
这样就完成了一对卡片的添加

1465
01:06:29,900 --> 01:06:32,040
这样创建卡片当然不行

1466
01:06:32,040 --> 01:06:33,600
只输入左括号和右括号

1467
01:06:33,600 --> 01:06:35,213
是不合法的

1468
01:06:35,213 --> 01:06:38,260
它需要这些变量

1469
01:06:38,260 --> 01:06:41,180
如果我只输入左括号

1470
01:06:41,180 --> 01:06:45,090
就能看到使用构造器的提示

1471
01:06:45,090 --> 01:06:46,950
使用这个逐一成员构造器

1472
01:06:46,950 --> 01:06:49,140
可以初始化每个参数

1473
01:06:49,140 --> 01:06:52,399
这样就能初始化这对卡片中的参数

1474
01:06:52,399 --> 01:06:55,710
因为这是一个结构体

1475
01:06:55,710 --> 01:06:59,260
所以你能自动获得这个逐一成员构造器

1476
01:06:59,260 --> 01:07:01,520
可以用它初始化每个变量

1477
01:07:01,520 --> 01:07:05,024
对了，类也有自动获得的构造器

1478
01:07:05,024 --> 01:07:08,380
但不能用它初始化变量

1479
01:07:08,380 --> 01:07:11,235
所以在类里要想初始化变量

1480
01:07:11,235 --> 01:07:13,938
要么像这里使用等号提供初始值

1481
01:07:13,938 --> 01:07:18,340
要么自定义构造器来初始化变量

1482
01:07:18,340 --> 01:07:20,410
就像我们这里定义的构造器

1483
01:07:20,410 --> 01:07:23,480
但是结构体就不需要自定义构造器了

1484
01:07:23,480 --> 01:07:26,510
因为结构体有自动获得的

1485
01:07:26,510 --> 01:07:27,880
逐一成员构造器

1486
01:07:27,880 --> 01:07:30,680
那么我在这里创建一个 Card

1487
01:07:30,680 --> 01:07:32,240
将 isFaceUp 初始化为 false

1488
01:07:32,240 --> 01:07:34,410
这是游戏开始时的状态

1489
01:07:34,410 --> 01:07:36,302
当然卡片也未曾匹配

1490
01:07:36,302 --> 01:07:38,290
我们还有 content 参数

1491
01:07:38,290 --> 01:07:40,116
这相当有趣

1492
01:07:40,116 --> 01:07:43,470
我们知道这两张卡片要传入相同的参数

1493
01:07:43,470 --> 01:07:45,570
现在离完成 Card 的创建不远了

1494
01:07:45,570 --> 01:07:47,800
我们在这里添加 Card

1495
01:07:47,800 --> 01:07:51,302
但这个 CardContent 类型的参数怎么办

1496
01:07:51,302 --> 01:07:53,260
这确实是个问题

1497
01:07:53,260 --> 01:07:55,110
也许我可以在这里用

1498
01:07:55,110 --> 01:07:59,300
var content = ...

1499
01:07:59,300 --> 01:08:01,310
声明一个变量

1500
01:08:01,310 --> 01:08:02,800
用来存储这对卡片的内容

1501
01:08:02,800 --> 01:08:04,810
然后作为参数传给 Card

1502
01:08:04,810 --> 01:08:07,120
这两张卡片的 content 参数相同

1503
01:08:07,120 --> 01:08:09,743
因为它们是一对卡片

1504
01:08:09,743 --> 01:08:14,330
但是我并不清楚
该如何创建这个 content

1505
01:08:14,330 --> 01:08:17,300
因为它的类型是 CardContent

1506
01:08:17,300 --> 01:08:19,570
这对我来说是无需关心的

1507
01:08:19,570 --> 01:08:20,940
我甚至都不知道它是什么

1508
01:08:20,940 --> 01:08:23,160
它可以是 Image、Int、String
我也不清楚

1509
01:08:23,160 --> 01:08:25,094
所以我怎么可能知道

1510
01:08:25,094 --> 01:08:26,853
如何创建

1511
01:08:26,853 --> 01:08:30,240
这种类型的参数呢？
毫无头绪

1512
01:08:30,240 --> 01:08:34,420
那么到底谁知道卡片的 content
该怎么创建呢

1513
01:08:34,420 --> 01:08:37,130
这个类肯定知道

1514
01:08:37,130 --> 01:08:38,960
它是一个 EmojiMemoryGame

1515
01:08:38,960 --> 01:08:40,920
它知道在创建 MemoryGame 时

1516
01:08:40,920 --> 01:08:44,430
CardContent 的类型为 String

1517
01:08:44,430 --> 01:08:46,790
想必它也知道每对卡片的 content

1518
01:08:46,790 --> 01:08:49,260
该如何创建吧

1519
01:08:49,260 --> 01:08:52,700
所以无论如何都要给它个机会

1520
01:08:52,700 --> 01:08:57,400
让它完成创建 content 的工作

1521
01:08:57,400 --> 01:09:01,560
我们用一个函数来实现

1522
01:09:01,560 --> 01:09:03,697
给构造器添加一个参数

1523
01:09:03,697 --> 01:09:07,150
cardContentFactory

1524
01:09:07,150 --> 01:09:09,710
是参数的名称

1525
01:09:09,710 --> 01:09:12,363
这个参数的类型是一个函数

1526
01:09:12,363 --> 01:09:14,460
这个函数有一个 Int 型的参数

1527
01:09:14,460 --> 01:09:17,830
返回值为 CardContent 类型

1528
01:09:17,830 --> 01:09:20,610
再次声明，我不关心它是什么类型

1529
01:09:20,610 --> 01:09:23,500
但是我要传入一个整数
就是卡片的对数

1530
01:09:23,500 --> 01:09:25,000
说实在的，我要让你知道

1531
01:09:25,000 --> 01:09:27,283
我在创建哪对卡片

1532
01:09:27,283 --> 01:09:30,220
你只需给我一个 CardContent

1533
01:09:30,220 --> 01:09:32,232
如果是图片就给我一张图片
如果是字符串

1534
01:09:32,232 --> 01:09:33,380
就给我一个字符串

1535
01:09:33,380 --> 01:09:35,330
我不关心

1536
01:09:35,330 --> 01:09:37,527
这样我可以通过调用这个函数

1537
01:09:37,527 --> 01:09:40,480
得到卡片的内容拿来使用了

1538
01:09:40,480 --> 01:09:45,480
输入 cardContentFactory

1539
01:09:46,750 --> 01:09:49,340
pairIndex 作为函数的参数

1540
01:09:49,340 --> 01:09:51,840
修正大小写

1541
01:09:51,840 --> 01:09:54,860
这样我们就调用了这个函数

1542
01:09:54,860 --> 01:09:58,620
这个参数可以是 String 类型

1543
01:09:58,620 --> 01:10:01,470
也可以是其他类似的类型
但它是一个函数

1544
01:10:01,470 --> 01:10:04,600
在 Swift 中函数是第一等类型

1545
01:10:04,600 --> 01:10:07,240
它们没什么特别的

1546
01:10:07,240 --> 01:10:09,220
你可以传递函数

1547
01:10:09,220 --> 01:10:10,480
如你所想

1548
01:10:10,480 --> 01:10:12,730
在函数式编程语言中

1549
01:10:12,730 --> 01:10:14,550
是可以传递函数的

1550
01:10:14,550 --> 01:10:16,380
这相当基础

1551
01:10:16,380 --> 01:10:19,240
它是函数式编程的基本功能

1552
01:10:19,240 --> 01:10:21,267
所以你无需担心

1553
01:10:21,267 --> 01:10:24,960
在其他编程语言中传递函数是很痛苦的

1554
01:10:24,960 --> 01:10:27,874
你需要使用指针之类烦人的东西

1555
01:10:27,874 --> 01:10:31,470
而这里你只需阐明

1556
01:10:31,470 --> 01:10:33,830
参数和返回值的类型

1557
01:10:33,830 --> 01:10:35,840
就能传递函数

1558
01:10:35,840 --> 01:10:38,280
这里出现一个黄色的警告

1559
01:10:38,280 --> 01:10:40,210
对了，我们知道红色的警告

1560
01:10:40,210 --> 01:10:42,942
意味着编译无法通过
这很糟糕

1561
01:10:42,942 --> 01:10:46,770
黄色的警告是可以编译通过的
但你还是要把它修正的

1562
01:10:46,770 --> 01:10:50,290
因为它往往会带来潜在的问题

1563
01:10:50,290 --> 01:10:52,500
即使不是当下的问题

1564
01:10:52,500 --> 01:10:53,563
那么这个警告的内容是什么呢？

1565
01:10:53,563 --> 01:10:55,720
这个 content 变量

1566
01:10:55,720 --> 01:10:59,230
这里的这个变量
永远不会发生改变

1567
01:10:59,230 --> 01:11:00,990
mutated 的意思是 changed

1568
01:11:00,990 --> 01:11:02,050
content 永不改变

1569
01:11:02,050 --> 01:11:04,600
可以考虑使用 let 将其声明为常量

1570
01:11:04,600 --> 01:11:07,530
说白了就是不要用 var

1571
01:11:07,530 --> 01:11:09,543
声明一个不会发生改变的值

1572
01:11:10,540 --> 01:11:13,660
不会发生改变的值就不应该是变量

1573
01:11:13,660 --> 01:11:17,070
在 Swift 中
我们使用关键字 let 替换 var

1574
01:11:17,070 --> 01:11:19,850
我们可以在这里输入 let 来消除警告

1575
01:11:19,850 --> 01:11:22,930
也可以使用这个警告的提示

1576
01:11:22,930 --> 01:11:25,320
选中警告并点击 Fix 按钮

1577
01:11:25,320 --> 01:11:29,310
即可用 let 替换 var

1578
01:11:29,310 --> 01:11:30,330
点击 Fix 按钮

1579
01:11:30,330 --> 01:11:31,210
替换成功

1580
01:11:31,210 --> 01:11:33,440
let 用在这里特别合适

1581
01:11:33,440 --> 01:11:36,100
因为代码读起来非常像英语

1582
01:11:36,100 --> 01:11:38,100
让 content 等于

1583
01:11:38,100 --> 01:11:42,420
以 pairIndex 为参数
调用 cardContentFactory 的返回值

1584
01:11:42,420 --> 01:11:45,360
每当你需要任何一个
实际上不会改变的值时

1585
01:11:45,360 --> 01:11:48,400
也就是说这个值是一个常量

1586
01:11:48,400 --> 01:11:50,863
你都应该使用 let 进行声明

1587
01:11:51,780 --> 01:11:53,740
另一个需要留意的地方很有意思

1588
01:11:53,740 --> 01:11:57,060
我们并没有指出 content 的类型

1589
01:11:57,060 --> 01:12:00,580
即使它的类型是 CardContent

1590
01:12:00,580 --> 01:12:01,980
我们也没有明确地写出来

1591
01:12:01,980 --> 01:12:03,740
它的类型是 CardContent

1592
01:12:03,740 --> 01:12:07,050
因为这是 contentCardFactory
返回值的类型

1593
01:12:07,050 --> 01:12:08,457
但我们无需指出

1594
01:12:08,457 --> 01:12:11,730
Swift 会尽力帮你

1595
01:12:11,730 --> 01:12:13,700
推断其类型

1596
01:12:13,700 --> 01:12:16,250
我们稍后会在调用构造器的地方

1597
01:12:16,250 --> 01:12:19,923
看到它的类型

1598
01:12:21,100 --> 01:12:23,660
现在我们回到

1599
01:12:23,660 --> 01:12:25,530
创建 MemoryGame 的地方

1600
01:12:25,530 --> 01:12:27,430
回车换到下一行

1601
01:12:27,430 --> 01:12:28,580
可以腾出一些空间

1602
01:12:28,580 --> 01:12:31,140
我们在 numberOfPairsOfCards 之后

1603
01:12:31,140 --> 01:12:33,990
添加第二个参数 cardContentFactory

1604
01:12:35,630 --> 01:12:40,340
这个参数值是一个函数

1605
01:12:40,340 --> 01:12:42,980
函数的参数是 Int 类型的 pairIndex

1606
01:12:42,980 --> 01:12:47,520
返回值是 String 类型的 CardContent

1607
01:12:47,520 --> 01:12:48,728
所以它要返回一个 String 类型的值

1608
01:12:48,728 --> 01:12:50,280
让我们创建这样一个函数

1609
01:12:50,280 --> 01:12:54,604
输入 func 创建一个名为
createCardContent 的函数

1610
01:12:54,604 --> 01:12:58,600
我们知道函数的参数
是 Int 类型的 pairIndex

1611
01:12:58,600 --> 01:13:02,060
输入参数的类型 Int
我们也知道其返回值

1612
01:13:02,060 --> 01:13:04,840
是 String 类型的 CardContent

1613
01:13:04,840 --> 01:13:07,860
因为这里是 MemoryGame<String>

1614
01:13:07,860 --> 01:13:11,525
现在我输入 return

1615
01:13:11,525 --> 01:13:14,780
让我们返回某个表情如何？

1616
01:13:14,780 --> 01:13:16,980
在每张卡片上放置相同的表情

1617
01:13:16,980 --> 01:13:19,200
或许是一个笑脸

1618
01:13:19,200 --> 01:13:23,090
这里我们返回了一个字符串

1619
01:13:23,090 --> 01:13:28,090
现在我们输入 createCardContent
来使用这个函数

1620
01:13:28,970 --> 01:13:32,330
给这个参数传入一个函数

1621
01:13:32,330 --> 01:13:35,350
函数的参数是 Int 类型
返回值是 String 类型

1622
01:13:35,350 --> 01:13:38,110
这当然是合规的

1623
01:13:38,110 --> 01:13:39,859
你看，没有报错，没有警告

1624
01:13:39,859 --> 01:13:43,068
完全是合法的方式

1625
01:13:43,068 --> 01:13:45,950
然而我们从不用这种方式

1626
01:13:45,950 --> 01:13:48,450
因为我不想用额外的几行代码

1627
01:13:48,450 --> 01:13:51,050
创建一个函数来实现

1628
01:13:51,050 --> 01:13:54,160
取而代之的是

1629
01:13:54,160 --> 01:13:56,360
我们把代码直接插入到这里

1630
01:13:56,360 --> 01:13:59,450
仔细看哦
现在我要逐步地

1631
01:13:59,450 --> 01:14:02,100
把这个函数

1632
01:14:02,100 --> 01:14:04,640
直接插入到这里

1633
01:14:04,640 --> 01:14:08,460
这种直接插入的函数
在 Swift 中叫做闭包

1634
01:14:08,460 --> 01:14:11,120
被称作闭包是因为

1635
01:14:11,120 --> 01:14:14,340
它实际上会从上下文中
捕获其运行所需的信息

1636
01:14:14,340 --> 01:14:16,300
这个我们稍后会讲

1637
01:14:16,300 --> 01:14:19,640
但是从根本上说
你现在可以把它当做一个内联函数

1638
01:14:19,640 --> 01:14:23,140
So we're going to select this function,

1639
01:14:23,140 --> 01:14:25,270
everything about it except for its name.

1640
01:14:25,270 --> 01:14:27,930
When we inline, it
doesn't need a name, okay?

1641
01:14:27,930 --> 01:14:31,720
No need for a name because just
sitting right there inline.

1642
01:14:31,720 --> 01:14:34,240
So I'm gonna select
everything except the name

1643
01:14:34,240 --> 01:14:37,360
and I'm going to cut
then I'm gonna go here

1644
01:14:37,360 --> 01:14:39,930
and paste it here
instead of the name here.

1645
01:14:39,930 --> 01:14:41,170
So, paste.

1646
01:14:41,170 --> 01:14:43,690
Now, this almost works as is

1647
01:14:43,690 --> 01:14:47,100
but there's one thing I always
have to do when I do this

1648
01:14:47,100 --> 01:14:50,610
is to take this curly brace right here,

1649
01:14:50,610 --> 01:14:54,130
cut it, replace it with the word in

1650
01:14:54,130 --> 01:14:59,040
and then paste the curly
brace over here at the start.

1651
01:14:59,040 --> 01:15:02,020
And essentially, the curly
braces have to surround

1652
01:15:02,020 --> 01:15:04,420
the entire inline function.

1653
01:15:04,420 --> 01:15:07,620
So, that's why we move the
curly brace out in front

1654
01:15:07,620 --> 01:15:10,620
of its arguments and return type there

1655
01:15:10,620 --> 01:15:14,350
and use this in to separate it.

1656
01:15:14,350 --> 01:15:16,270
Okay, now, we don't need this func up here

1657
01:15:16,270 --> 01:15:18,060
and you can see again, no errors,

1658
01:15:18,060 --> 01:15:21,860
this was perfectly legal
way to inline this function.

1659
01:15:21,860 --> 01:15:24,950
By the way, you probably
recognize this in,

1660
01:15:24,950 --> 01:15:28,650
we used to somewhere else
over here in our View

1661
01:15:28,650 --> 01:15:32,410
with for each, it used in and
had a little argument here.

1662
01:15:32,410 --> 01:15:35,070
So, this is gonna start
making a lot more sense to you

1663
01:15:35,070 --> 01:15:37,880
once we finish up with this.

1664
01:15:37,880 --> 01:15:39,700
And what do I mean by
finish off with this?

1665
01:15:39,700 --> 01:15:40,759
Isn't this just finished?

1666
01:15:40,759 --> 01:15:45,100
Well, not quite because just
like when we were over here,

1667
01:15:45,100 --> 01:15:49,420
Swift was able to infer that
this was type CardContent

1668
01:15:49,420 --> 01:15:54,170
so we didn't have to say
colon CardContent here, right?

1669
01:15:54,170 --> 01:15:59,080
So that kind of inferring that
we call that type inference

1670
01:15:59,080 --> 01:16:00,960
is really nice in a language

1671
01:16:00,960 --> 01:16:03,710
where everything has to be strongly typed,

1672
01:16:03,710 --> 01:16:06,000
every single var has to have a type, okay?

1673
01:16:06,000 --> 01:16:10,960
That's somewhat of a
burden but type inference

1674
01:16:10,960 --> 01:16:13,770
helps make it so that
it's not such a burden.

1675
01:16:13,770 --> 01:16:17,910
And what kind of types
can Swift infer in here?

1676
01:16:17,910 --> 01:16:19,530
Well, a whole lot of them.

1677
01:16:19,530 --> 01:16:22,370
It knows the type of this var,

1678
01:16:22,370 --> 01:16:25,000
which is a function that takes an Int

1679
01:16:25,000 --> 01:16:27,740
and returns a CardContent.

1680
01:16:27,740 --> 01:16:30,670
So that means that we don't
need to say this is an Int

1681
01:16:30,670 --> 01:16:34,350
and we don't need to say
this returns to String, okay?

1682
01:16:34,350 --> 01:16:35,600
Swift can infer that.

1683
01:16:35,600 --> 01:16:39,010
Again, look, no errors, no
warnings, it's perfectly legal.

1684
01:16:39,010 --> 01:16:40,320
You don't even really need

1685
01:16:40,320 --> 01:16:43,182
these parentheses right here, okay?

1686
01:16:43,182 --> 01:16:45,760
'Cause they're not really
doing anything at that point

1687
01:16:45,760 --> 01:16:47,657
and here, this pairIndex in,

1688
01:16:47,657 --> 01:16:51,340
again, like an awful lot
like index in over here

1689
01:16:51,340 --> 01:16:53,543
'cause this, it turns out
is a function as well,

1690
01:16:53,543 --> 01:16:54,450
kind of a special function

1691
01:16:54,450 --> 01:16:56,720
because you can list the Views there

1692
01:16:56,720 --> 01:17:00,760
but it's the same syntax
that's going on here.

1693
01:17:00,760 --> 01:17:02,490
But we're not done yet because, of course,

1694
01:17:02,490 --> 01:17:04,920
we know this is now a one line function

1695
01:17:04,920 --> 01:17:07,760
that returns this string.

1696
01:17:07,760 --> 01:17:10,617
So we don't need return right there.

1697
01:17:10,617 --> 01:17:14,720
And we could even clean up
some of this space here,

1698
01:17:14,720 --> 01:17:17,860
remove some of the space like that

1699
01:17:17,860 --> 01:17:22,050
and even more, we know that if
you have a curly brace thing,

1700
01:17:22,050 --> 01:17:24,720
that is the last argument, right?

1701
01:17:24,720 --> 01:17:27,526
The last argument that
this init has two arguments

1702
01:17:27,526 --> 01:17:30,180
and this is the last one.

1703
01:17:30,180 --> 01:17:33,360
We can do the same thing we
did with the last argument

1704
01:17:33,360 --> 01:17:35,810
for ForEach, the last argument to HStack,

1705
01:17:35,810 --> 01:17:39,460
the last argument to ZStack,
do the exact same thing here

1706
01:17:39,460 --> 01:17:42,183
which is to get rid of the keyword, okay?

1707
01:17:43,390 --> 01:17:48,390
And put the curly brace thing
outside, floating outside

1708
01:17:48,600 --> 01:17:53,117
so we end up with this very
streamlined function here

1709
01:17:54,530 --> 01:17:55,580
and even more than that,

1710
01:17:55,580 --> 01:17:58,888
notice that since we're just
always returning a smiley face,

1711
01:17:58,888 --> 01:18:00,970
you don't really even
need this pairIndex here

1712
01:18:00,970 --> 01:18:02,290
but you can't delete it,

1713
01:18:02,290 --> 01:18:05,000
you have to mark it with an underbar

1714
01:18:05,000 --> 01:18:06,780
just to say yeah, I know this is supposed

1715
01:18:06,780 --> 01:18:08,610
to take an argument but I don't need it

1716
01:18:08,610 --> 01:18:10,850
so I'm just gonna use under
var and then in Swift,

1717
01:18:10,850 --> 01:18:14,790
you're gonna see we use
underbar anytime we mean,

1718
01:18:14,790 --> 01:18:15,900
it doesn't matter what this is,

1719
01:18:15,900 --> 01:18:19,200
I'm not gonna use this
things, kind of unused things

1720
01:18:19,200 --> 01:18:22,480
so we're not using that
pairIndex and so it does this.

1721
01:18:22,480 --> 01:18:27,480
So, it's really nice simple syntax here.

1722
01:18:27,600 --> 01:18:28,840
And you're gonna wanna get used to this

1723
01:18:28,840 --> 01:18:31,280
because we're gonna be doing
this calling functions.

1724
01:18:31,280 --> 01:18:32,890
You've already seen in the View,

1725
01:18:32,890 --> 01:18:35,940
we do these things all over
the rest, these curly braces,

1726
01:18:35,940 --> 01:18:38,429
they're everywhere and this
is functional programming

1727
01:18:38,429 --> 01:18:41,580
so we're gonna be passing a
lot of functions as arguments

1728
01:18:41,580 --> 01:18:43,360
to other functions.

1729
01:18:43,360 --> 01:18:46,020
What if we wanna do something

1730
01:18:46,020 --> 01:18:48,300
where we're actually
returning a different emoji

1731
01:18:48,300 --> 01:18:49,650
for each pair of cards, okay?

1732
01:18:49,650 --> 01:18:51,450
We don't wanna have every pair of Cards

1733
01:18:51,450 --> 01:18:52,283
have the smiley face,

1734
01:18:52,283 --> 01:18:53,567
that would make the game very easy

1735
01:18:53,567 --> 01:18:55,010
but we don't wanna do that.

1736
01:18:55,010 --> 01:18:57,500
So how would we do a more
complicated thing there?

1737
01:18:57,500 --> 01:18:59,350
Well, to do that, first of all,

1738
01:18:59,350 --> 01:19:01,330
I'm gonna, instead of doing this,

1739
01:19:01,330 --> 01:19:03,330
setting this right in line here,

1740
01:19:03,330 --> 01:19:05,637
I'm gonna try and create a function here,

1741
01:19:05,637 --> 01:19:09,370
I'm gonna call this createMemoryGame

1742
01:19:11,140 --> 01:19:14,640
and then I'm gonna put this into a func

1743
01:19:14,640 --> 01:19:17,310
called createMemoryGame.

1744
01:19:17,310 --> 01:19:21,783
It's gonna return in
MemoryGame of string, okay?

1745
01:19:23,210 --> 01:19:28,210
And this and it's going to
essentially return this.

1746
01:19:28,990 --> 01:19:31,800
And here, we're gonna do
something more complicated

1747
01:19:31,800 --> 01:19:33,690
than just that.

1748
01:19:33,690 --> 01:19:37,640
Remember, this is the pairIndex in.

1749
01:19:37,640 --> 01:19:40,570
And so, how am I gonna implement this?

1750
01:19:40,570 --> 01:19:44,263
I'm going to create a little emojis Array.

1751
01:19:45,290 --> 01:19:47,580
This is gonna be an Array of String,

1752
01:19:47,580 --> 01:19:49,380
an Array of emojis, actually.

1753
01:19:49,380 --> 01:19:52,320
I'm gonna set it equal
to a constant Array.

1754
01:19:52,320 --> 01:19:55,360
So this is what this the
syntax is for a constant Array.

1755
01:19:55,360 --> 01:19:57,380
So you just do open square bracket

1756
01:19:57,380 --> 01:19:59,617
and then the things you want in the Array

1757
01:19:59,617 --> 01:20:01,560
and then close square bracket.

1758
01:20:01,560 --> 01:20:03,750
So these things for me are gonna be emoji

1759
01:20:03,750 --> 01:20:04,583
so I'm gonna go over here,

1760
01:20:04,583 --> 01:20:08,117
let's go back to our Halloween theme here

1761
01:20:08,117 --> 01:20:11,850
and get Mr. Ghost, there's a ghost

1762
01:20:11,850 --> 01:20:14,800
and then in this one, we'll
put some other Halloween thing.

1763
01:20:14,800 --> 01:20:17,070
How about pumpkin?

1764
01:20:17,070 --> 01:20:19,690
Maybe a pump, no, I'll go pumpkin.

1765
01:20:19,690 --> 01:20:20,748
Okay, there's a pumpkin.

1766
01:20:20,748 --> 01:20:22,023
And we have this.

1767
01:20:22,023 --> 01:20:25,153
So this creates an Array of
String because these are Strings

1768
01:20:25,153 --> 01:20:27,830
and in here, return this MemoryGame,

1769
01:20:27,830 --> 01:20:32,613
so my little Card factory is
just going to return emojis

1770
01:20:34,000 --> 01:20:36,440
sub pairIndex.

1771
01:20:36,440 --> 01:20:38,930
So this is how you access an Array.

1772
01:20:38,930 --> 01:20:41,860
You just put square brackets
around whatever the index is

1773
01:20:41,860 --> 01:20:44,130
and so this pairIndex, it's gonna be zero

1774
01:20:44,130 --> 01:20:47,040
then it's gonna be one and
so we're gonna get index zero

1775
01:20:47,040 --> 01:20:48,710
then we're gonna get index one.

1776
01:20:48,710 --> 01:20:51,291
So the first pair of cards
will be a pair of ghosts,

1777
01:20:51,291 --> 01:20:54,413
second pair of cards are
gonna be a pair of pumpkins.

1778
01:20:55,380 --> 01:20:57,240
So, this code, no errors

1779
01:20:57,240 --> 01:20:59,042
but oh, we have an error up here.

1780
01:20:59,042 --> 01:21:00,030
What does this say?

1781
01:21:00,030 --> 01:21:03,770
Cannot use instance
member createMemoryGame

1782
01:21:03,770 --> 01:21:05,920
within a property initializer.

1783
01:21:05,920 --> 01:21:10,920
Property initializers run
before self is available.

1784
01:21:11,561 --> 01:21:13,790
Okay, so what does that mean?

1785
01:21:13,790 --> 01:21:18,790
Well, here, I've told you
that we cannot, in Swift have,

1786
01:21:19,395 --> 01:21:22,587
any variable that's not
initialize to something,

1787
01:21:22,587 --> 01:21:25,616
what's even more restrictive than that,

1788
01:21:25,616 --> 01:21:30,616
we cannot use any functions
on our class or struct

1789
01:21:30,820 --> 01:21:33,804
until all of these are initialized.

1790
01:21:33,804 --> 01:21:35,940
So that major catch-22 here,

1791
01:21:35,940 --> 01:21:39,990
I wanna use a function
on my instance right here

1792
01:21:39,990 --> 01:21:41,960
to create this MemoryGame

1793
01:21:41,960 --> 01:21:44,380
but I can't until this is initialized.

1794
01:21:44,380 --> 01:21:45,890
So, it's like wah!

1795
01:21:45,890 --> 01:21:47,192
So, how are we gonna fix this?

1796
01:21:47,192 --> 01:21:49,930
We're gonna turn this
createMemoryGame here

1797
01:21:49,930 --> 01:21:53,220
actually into a static func.

1798
01:21:53,220 --> 01:21:54,640
So, a static func,

1799
01:21:54,640 --> 01:21:58,170
that makes this a function
on the type, all right?

1800
01:21:58,170 --> 01:21:59,650
So instead of being a function

1801
01:21:59,650 --> 01:22:03,000
that you send to an
instance of EmojiMemoryGame,

1802
01:22:03,000 --> 01:22:05,840
hopefully, everyone knows
in the object-oriented sense

1803
01:22:05,840 --> 01:22:09,460
what an instance means,
we're sending it to the type.

1804
01:22:09,460 --> 01:22:12,480
And the syntax for that is we type

1805
01:22:12,480 --> 01:22:17,480
the name of the type in,
MemoryGame. and the function

1806
01:22:19,000 --> 01:22:21,650
and that only works for static functions.

1807
01:22:21,650 --> 01:22:23,640
So this is a function on the type,

1808
01:22:23,640 --> 01:22:26,220
not a function on a MemoryGame instance,

1809
01:22:26,220 --> 01:22:29,235
EmojiMemoryGame instance, but
actually, on the type itself.

1810
01:22:29,235 --> 01:22:31,970
We have actually already used this.

1811
01:22:31,970 --> 01:22:35,560
Over here in ContentView, Color.orange,

1812
01:22:35,560 --> 01:22:36,483
Font.largeTitle.

1813
01:22:37,570 --> 01:22:40,130
These are types, Font and Color are types

1814
01:22:40,130 --> 01:22:42,484
so these are, in this case vars

1815
01:22:42,484 --> 01:22:44,290
but you can do with functions or vars,

1816
01:22:44,290 --> 01:22:45,970
vars on that type.

1817
01:22:45,970 --> 01:22:47,220
These are static.

1818
01:22:47,220 --> 01:22:50,130
In fact, let's go and
look in the documentation

1819
01:22:50,130 --> 01:22:51,090
and see this happening.

1820
01:22:51,090 --> 01:22:54,530
So, how can we jump into the
documentation from our code?

1821
01:22:54,530 --> 01:22:56,000
Here's a really cool feature.

1822
01:22:56,000 --> 01:22:57,680
Hold down the Option key.

1823
01:22:57,680 --> 01:23:00,410
When you do, when you
mouse over something,

1824
01:23:00,410 --> 01:23:02,410
it will have a question mark on it.

1825
01:23:02,410 --> 01:23:04,400
So I'm gonna click on Font

1826
01:23:04,400 --> 01:23:07,940
and it gives me a short
description of what font is

1827
01:23:07,940 --> 01:23:11,550
but it also has this nice
a little link right here.

1828
01:23:11,550 --> 01:23:14,560
Boom, take me to the
documentation and show me Font.

1829
01:23:14,560 --> 01:23:16,730
So this is how you can get
into the documentation.

1830
01:23:16,730 --> 01:23:18,930
Of course, you can also go Window,

1831
01:23:18,930 --> 01:23:21,410
Developer Documentation up here

1832
01:23:21,410 --> 01:23:23,570
but doing that Option + click,

1833
01:23:23,570 --> 01:23:26,630
it's usually how we get into
the documentation, actually.

1834
01:23:26,630 --> 01:23:28,420
And if you look in Font right here,

1835
01:23:28,420 --> 01:23:30,415
you can see, there's
largeTitle right off the bat

1836
01:23:30,415 --> 01:23:32,590
and see, it's static.

1837
01:23:32,590 --> 01:23:36,650
It's also a let, so
largeTitle is a constant.

1838
01:23:36,650 --> 01:23:38,680
Static let so it's on the Font,

1839
01:23:38,680 --> 01:23:42,980
on the actual type itself, the Font type.

1840
01:23:42,980 --> 01:23:45,130
You can see there's all
these other ones as well.

1841
01:23:45,130 --> 01:23:48,220
You probably wanna use one of
these also for your homework.

1842
01:23:48,220 --> 01:23:50,030
You can kinda experiment
what they look at.

1843
01:23:50,030 --> 01:23:52,460
Like, these are just built-in fonts

1844
01:23:52,460 --> 01:23:54,500
and these are fonts we'd like to use

1845
01:23:54,500 --> 01:23:57,810
because everyone else is using
them and all the other apps

1846
01:23:57,810 --> 01:24:00,820
and so as users use your app
and then there's another app,

1847
01:24:00,820 --> 01:24:02,760
they see the same types of fonts

1848
01:24:02,760 --> 01:24:05,350
and these fonts just have
a little different style

1849
01:24:05,350 --> 01:24:07,900
or whatever but it's same

1850
01:24:07,900 --> 01:24:10,690
throughout the entire system, okay?

1851
01:24:10,690 --> 01:24:13,430
While we're looking here
in the documentation,

1852
01:24:13,430 --> 01:24:14,530
let's show you some features

1853
01:24:14,530 --> 01:24:16,860
of the documentation viewer here.

1854
01:24:16,860 --> 01:24:18,420
You can search, obviously, up here.

1855
01:24:18,420 --> 01:24:20,740
So let's, for example, search for Array.

1856
01:24:20,740 --> 01:24:23,620
And if I search for Array,
here's all the matches

1857
01:24:23,620 --> 01:24:24,810
where it finds Array.

1858
01:24:24,810 --> 01:24:28,790
The first suggested one is
a likely going to be a class

1859
01:24:28,790 --> 01:24:29,900
or struct with that name.

1860
01:24:29,900 --> 01:24:33,000
Here is array, you can see
Array of Element, right?

1861
01:24:33,000 --> 01:24:34,070
It's a generic type.

1862
01:24:34,070 --> 01:24:36,630
This is it's don't care.
it's called Element,

1863
01:24:36,630 --> 01:24:39,410
just like our don't care
is called CardContent.

1864
01:24:39,410 --> 01:24:42,960
And these descriptions
are really detailed,

1865
01:24:42,960 --> 01:24:45,380
tell you all about an Array, how it works.

1866
01:24:45,380 --> 01:24:48,960
You're definitely gonna
wanna read this for Array,

1867
01:24:48,960 --> 01:24:51,617
familiarize yourself of what Array can do.

1868
01:24:51,617 --> 01:24:54,420
That will definitely help
you with your homework.

1869
01:24:54,420 --> 01:24:56,710
If you scroll down here
and look through all these,

1870
01:24:56,710 --> 01:24:59,550
I don't expect you to figure
out how all these work

1871
01:24:59,550 --> 01:25:01,290
but you definitely wanna be able to search

1872
01:25:01,290 --> 01:25:02,670
through these here and see

1873
01:25:02,670 --> 01:25:06,060
if you can find a particular function

1874
01:25:06,060 --> 01:25:08,720
that might help you with
your homework, okay?

1875
01:25:08,720 --> 01:25:12,198
And same thing with View,
let's go look at View.

1876
01:25:12,198 --> 01:25:14,080
Okay, View right here.

1877
01:25:14,080 --> 01:25:16,437
Another description of View up here,

1878
01:25:16,437 --> 01:25:18,370
we're gonna learn all about that,

1879
01:25:18,370 --> 01:25:21,820
we already have learned
quite a bit about View here.

1880
01:25:21,820 --> 01:25:24,925
Now, if you have so many
functions and vars on it

1881
01:25:24,925 --> 01:25:28,180
that it's divided them
into sections right here.

1882
01:25:28,180 --> 01:25:32,060
A couple of interesting ones
to look at might be layout,

1883
01:25:32,060 --> 01:25:34,360
which we're gonna learn a
lot more about next week.

1884
01:25:34,360 --> 01:25:37,129
That's where you find things like padding

1885
01:25:37,129 --> 01:25:39,330
and also, rendering, okay?

1886
01:25:39,330 --> 01:25:42,300
So, rendering, it's we can
learn how to scale and rotate

1887
01:25:42,300 --> 01:25:45,200
and blur things, other kind of stuff.

1888
01:25:45,200 --> 01:25:48,064
So, again, this is something
you're probably going to find

1889
01:25:48,064 --> 01:25:52,180
stuff in here that will
help you with your homework.

1890
01:25:52,180 --> 01:25:55,260
So, part of the homework
is really to just start

1891
01:25:56,350 --> 01:25:58,540
kind of maneuvering around in here.

1892
01:25:58,540 --> 01:25:59,373
Some of this stuff you're not

1893
01:25:59,373 --> 01:26:01,160
gonna understand at all like State.

1894
01:26:01,160 --> 01:26:03,360
You're gonna be like, whoa
what the heck is that?

1895
01:26:03,360 --> 01:26:06,100
I don't expect you to
be learning any of this

1896
01:26:06,100 --> 01:26:07,654
by reading the documentation

1897
01:26:07,654 --> 01:26:10,780
but I definitely expect you to
know about the documentation,

1898
01:26:10,780 --> 01:26:13,549
know what's in there so
you can go search around

1899
01:26:13,549 --> 01:26:16,233
and find things, okay?

1900
01:26:17,710 --> 01:26:19,740
All right, so back to here.

1901
01:26:19,740 --> 01:26:21,270
So we did this a nice static function.

1902
01:26:21,270 --> 01:26:23,420
Again, no errors, no warnings.

1903
01:26:23,420 --> 01:26:25,530
We're using this as kind
of a utility function

1904
01:26:25,530 --> 01:26:28,150
to create our MemoryGame.

1905
01:26:28,150 --> 01:26:30,830
Now, that we have a ViewModel, okay?

1906
01:26:30,830 --> 01:26:33,310
That's looking at our Model, all right?

1907
01:26:33,310 --> 01:26:36,180
Our Model, we don't
actually have our Model

1908
01:26:36,180 --> 01:26:37,610
play the game when you choose

1909
01:26:37,610 --> 01:26:40,410
but hopefully, at least, say card chosen.

1910
01:26:40,410 --> 01:26:44,700
Let's go back to our View and
use our ViewModel, all right?

1911
01:26:44,700 --> 01:26:49,700
Remember that our View always
wants to use the ViewModel

1912
01:26:50,190 --> 01:26:51,800
to access what's in the Model.

1913
01:26:51,800 --> 01:26:53,610
Also don't forget that the View

1914
01:26:53,610 --> 01:26:56,400
is its primary thing in the world

1915
01:26:56,400 --> 01:26:58,890
is to reflect the current
state of the Model, okay?

1916
01:26:58,890 --> 01:27:02,890
So, whatever's in the Model,
it wants to always show.

1917
01:27:02,890 --> 01:27:06,120
So let's start down
here with our CardView.

1918
01:27:06,120 --> 01:27:09,240
Currently, our CardView
has this one var isFaceUp

1919
01:27:09,240 --> 01:27:11,930
but really, it should
be getting that isFaceUp

1920
01:27:11,930 --> 01:27:14,600
from the Card that it's viewing.

1921
01:27:14,600 --> 01:27:18,900
So I'm gonna change this var
from isFaceUp to be a Card,

1922
01:27:18,900 --> 01:27:23,900
which is a MemoryGame&lt;String&gt;.Card.

1923
01:27:24,170 --> 01:27:27,070
By the way, you notice we've
been typing this out a lot.

1924
01:27:27,070 --> 01:27:28,290
This is a lot to type.

1925
01:27:28,290 --> 01:27:30,620
Of course, Swift has a way to make it so

1926
01:27:30,620 --> 01:27:31,800
we don't have to take that so much

1927
01:27:31,800 --> 01:27:34,250
and we'll talk about that next week.

1928
01:27:34,250 --> 01:27:36,470
And then here, instead of saying isFaceUp,

1929
01:27:36,470 --> 01:27:39,130
I'm gonna say card.isFaceUp.

1930
01:27:39,130 --> 01:27:41,560
And instead of always showing a ghost,

1931
01:27:41,560 --> 01:27:44,490
I'm gonna get the Card's content.

1932
01:27:44,490 --> 01:27:46,560
Now, this is pretty cool right here.

1933
01:27:46,560 --> 01:27:51,560
Content in our MemoryGame,
this is a type CardContent,

1934
01:27:52,110 --> 01:27:54,260
don't care, don't even know what it is

1935
01:27:54,260 --> 01:27:56,473
but of course, in a EmojiMemoryGame,

1936
01:27:57,330 --> 01:27:59,340
we make it be a String.

1937
01:27:59,340 --> 01:28:02,860
And so, that's why over
here in our content View,

1938
01:28:02,860 --> 01:28:04,830
this is a MemoryGame of Strings card

1939
01:28:04,830 --> 01:28:07,310
so the card's content is a type String

1940
01:28:07,310 --> 01:28:08,423
and that's what a Text wanted,

1941
01:28:08,423 --> 01:28:11,550
it wants a text String all right?

1942
01:28:11,550 --> 01:28:13,700
So up here, our CardView,

1943
01:28:13,700 --> 01:28:15,860
it's not going to take
in isFaceUp anymore,

1944
01:28:15,860 --> 01:28:18,220
it wants to take some sort of Card.

1945
01:28:18,220 --> 01:28:19,950
So we're gonna have to find some way

1946
01:28:19,950 --> 01:28:22,130
to provide it with a Card.

1947
01:28:22,130 --> 01:28:24,840
Now, how are we going to
provide that thing with a Card?

1948
01:28:24,840 --> 01:28:28,440
Well, we're gonna get those
Cards through our ViewModel.

1949
01:28:28,440 --> 01:28:31,340
So, we need some sort of var here,

1950
01:28:31,340 --> 01:28:33,110
which I'm gonna call viewModel

1951
01:28:33,110 --> 01:28:36,770
Again, you would not call a var viewModel

1952
01:28:36,770 --> 01:28:41,120
just like you wouldn't call a var model

1953
01:28:41,120 --> 01:28:43,440
but I just wanted, in
this code, for you to see

1954
01:28:43,440 --> 01:28:45,510
when I'm accessing the
Model, same thing here,

1955
01:28:45,510 --> 01:28:48,710
I want you to see when I'm
accessing the ViewModel.

1956
01:28:48,710 --> 01:28:50,590
So what type is the viewModel?

1957
01:28:50,590 --> 01:28:53,940
It's an EmojiMemoryGame, okay?

1958
01:28:53,940 --> 01:28:57,620
This is our ViewModel type, right?

1959
01:28:57,620 --> 01:29:00,470
Class EmojiMemoryGame right there.

1960
01:29:00,470 --> 01:29:03,090
So, since this is a class,
this is a pointer to it.

1961
01:29:03,090 --> 01:29:05,497
if I had other Views that were
accessed in the ViewModel,

1962
01:29:05,497 --> 01:29:07,010
they'd have pointers to it

1963
01:29:07,010 --> 01:29:11,700
so there would only be one
EmojiMemoryGame somewhere.

1964
01:29:11,700 --> 01:29:15,208
So where are we going to
create this EmojiMemoryGame?

1965
01:29:15,208 --> 01:29:17,038
Well we're gonna create it

1966
01:29:17,038 --> 01:29:21,390
in wherever this content
View is being created.

1967
01:29:21,390 --> 01:29:23,430
We're gonna do the same
thing we were doing before

1968
01:29:23,430 --> 01:29:24,283
with the Card's isFaceUp,

1969
01:29:24,283 --> 01:29:26,640
it's actually the same
thing we're doing here.

1970
01:29:26,640 --> 01:29:28,890
And so where is this created?

1971
01:29:28,890 --> 01:29:31,180
So, this is a time to dive in a little bit

1972
01:29:31,180 --> 01:29:32,280
to this boilerplate.

1973
01:29:32,280 --> 01:29:34,690
Remember, I told you there
was this AppDelegate,

1974
01:29:34,690 --> 01:29:36,370
SceneDelegate boiler plate.

1975
01:29:36,370 --> 01:29:39,240
Well, if we click on the SceneDelegate,

1976
01:29:39,240 --> 01:29:40,840
we'll see there's some junk in here

1977
01:29:40,840 --> 01:29:42,520
which we're gonna talk about later

1978
01:29:42,520 --> 01:29:44,840
but here is the very
important line of code

1979
01:29:44,840 --> 01:29:47,910
that creates the ContentView that is used

1980
01:29:47,910 --> 01:29:51,760
as the Windows' main View, okay?

1981
01:29:51,760 --> 01:29:53,900
So this ContentView is already complaining

1982
01:29:53,900 --> 01:29:56,180
missing argument for viewModel right?

1983
01:29:56,180 --> 01:29:59,480
It knows that over here,
we've got this viewModel

1984
01:29:59,480 --> 01:30:01,960
It doesn't set equal to anything

1985
01:30:01,960 --> 01:30:04,450
so we've got to do that when we create it.

1986
01:30:04,450 --> 01:30:08,900
So I need to say viewModel
is something here.

1987
01:30:08,900 --> 01:30:12,410
So I'm going to have this
be a var called the game

1988
01:30:12,410 --> 01:30:16,507
and I'm gonna say let game
equal EmojiMemoryGame,

1989
01:30:17,910 --> 01:30:19,750
open parentheses, close parentheses,

1990
01:30:19,750 --> 01:30:23,170
I get a free init because
this is a class, right?

1991
01:30:23,170 --> 01:30:25,750
A free init that initializes nothing

1992
01:30:25,750 --> 01:30:29,500
but luckily, I initialize my only var here

1993
01:30:29,500 --> 01:30:31,420
using this, right?

1994
01:30:31,420 --> 01:30:32,903
So this is gonna work.

1995
01:30:33,830 --> 01:30:36,747
So here we go, we got this
game for passing the ViewModel.

1996
01:30:36,747 --> 01:30:39,450
And by the way, if we go back here

1997
01:30:39,450 --> 01:30:40,830
and look at our ContentView,

1998
01:30:40,830 --> 01:30:42,960
it's still gonna be complaining down here.

1999
01:30:42,960 --> 01:30:46,260
This is that glue that
glues this to the gray area.

2000
01:30:46,260 --> 01:30:47,670
It's creating a ContentView

2001
01:30:47,670 --> 01:30:52,240
to show in this canvas over here.

2002
01:30:52,240 --> 01:30:56,376
Okay, so, this ContentView
also needs a ViewModel here.

2003
01:30:56,376 --> 01:31:00,870
For this, I'll just create
an EmojiMemoryGame on the fly

2004
01:31:00,870 --> 01:31:04,280
because this is essentially
for testing or whatever

2005
01:31:04,280 --> 01:31:06,270
so it can create this thing on the fly,

2006
01:31:06,270 --> 01:31:09,260
doesn't need to put it in
a variable and all that.

2007
01:31:09,260 --> 01:31:11,290
Okay, so, we're getting close.

2008
01:31:11,290 --> 01:31:13,320
Now, we have our ViewModel right here.

2009
01:31:13,320 --> 01:31:16,710
How do we use the
ViewModel to get the Cards

2010
01:31:16,710 --> 01:31:17,850
that we're gonna show?

2011
01:31:17,850 --> 01:31:21,060
Well, right now, we just
throw it show four Cards,

2012
01:31:21,060 --> 01:31:22,890
zero, one, two, or three.

2013
01:31:22,890 --> 01:31:24,920
We're using a range right here.

2014
01:31:24,920 --> 01:31:27,480
Gonna click this again.

2015
01:31:27,480 --> 01:31:28,880
We're using this range

2016
01:31:28,880 --> 01:31:31,920
and I told you this could
be any iteratable thing.

2017
01:31:31,920 --> 01:31:33,690
So how about if we just make this

2018
01:31:33,690 --> 01:31:36,940
be our ViewModel's Cards, okay?

2019
01:31:36,940 --> 01:31:40,640
This is an Array of
MemoryGame&lt;String&gt;.Cards

2020
01:31:40,640 --> 01:31:43,120
and so, this should just work, right?

2021
01:31:43,120 --> 01:31:45,990
But it doesn't work, okay?

2022
01:31:45,990 --> 01:31:48,400
In fact, I typed an Array thing here

2023
01:31:48,400 --> 01:31:50,520
and it says cannot convert from value

2024
01:31:50,520 --> 01:31:53,340
to expected argument range of Int.

2025
01:31:53,340 --> 01:31:57,290
It still thinks I want
range of Int in here.

2026
01:31:57,290 --> 01:32:01,240
That's because kinda mislead you a little

2027
01:32:01,240 --> 01:32:04,007
when I said this could
be any iteratable thing.

2028
01:32:04,007 --> 01:32:07,200
It actually is any iteratable thing

2029
01:32:07,200 --> 01:32:09,280
where the things that's iterating over

2030
01:32:09,280 --> 01:32:12,940
are what is called Identifiable, okay?

2031
01:32:12,940 --> 01:32:15,440
These things have to be Identifiable.

2032
01:32:15,440 --> 01:32:18,960
If they're not a range of Int,
they have to be Identifiable.

2033
01:32:18,960 --> 01:32:20,790
So, why?

2034
01:32:20,790 --> 01:32:23,020
Why do these have to be Identifiable?

2035
01:32:23,020 --> 01:32:27,060
Well, for example, let's say
you're want to do animation

2036
01:32:27,060 --> 01:32:30,670
and let's say these Cards
are moving around, okay?

2037
01:32:30,670 --> 01:32:33,410
Moving into a different
order or something like that.

2038
01:32:33,410 --> 01:32:36,470
This for each needs to be able to identify

2039
01:32:36,470 --> 01:32:40,520
which Card is which so
that the View it creates

2040
01:32:40,520 --> 01:32:43,750
for each Card, which is
what this is, this CardView,

2041
01:32:43,750 --> 01:32:47,520
it can keep that View in
sync with these Cards.

2042
01:32:47,520 --> 01:32:50,850
So these things have to be
identifiable and right now,

2043
01:32:50,850 --> 01:32:53,261
if you look at this, this
is an Array of Card, right?

2044
01:32:53,261 --> 01:32:58,261
ViewModel.cards is this
Array of MemoryGame Cards.

2045
01:32:59,100 --> 01:33:02,380
If we look at MemoryGame Cards,
they are not identifiable,

2046
01:33:02,380 --> 01:33:04,420
there's no way to identify them.

2047
01:33:04,420 --> 01:33:07,150
In fact, right now, they're all the same.

2048
01:33:07,150 --> 01:33:08,433
Two Cards that match would be the same

2049
01:33:08,433 --> 01:33:10,210
because they have the same content,

2050
01:33:10,210 --> 01:33:11,911
they might be the same isFaceUp.

2051
01:33:11,911 --> 01:33:14,410
There's no way of identifying them.

2052
01:33:14,410 --> 01:33:18,810
So, Swift has a formalism,
a formal mechanism

2053
01:33:18,810 --> 01:33:22,670
for identifying something,
making something identifiable

2054
01:33:22,670 --> 01:33:25,040
and it does it with
something I like to call

2055
01:33:25,040 --> 01:33:27,500
constrains and gains.

2056
01:33:27,500 --> 01:33:31,160
So that's when you require a
struct to do a certain thing,

2057
01:33:31,160 --> 01:33:34,430
you constrain it to do a certain thing

2058
01:33:34,430 --> 01:33:38,120
but if it does, then it
gains certain capabilities.

2059
01:33:38,120 --> 01:33:40,560
Now, we're gonna talk all about

2060
01:33:40,560 --> 01:33:44,163
how constrains and gains works next week.

2061
01:33:45,250 --> 01:33:47,322
And we've already used
constrains and gains,

2062
01:33:47,322 --> 01:33:51,490
actually, here, colon View
was constrains and gains.

2063
01:33:51,490 --> 01:33:54,857
We constrained ourselves to
have to do this body, okay?

2064
01:33:54,857 --> 01:33:59,210
But we gained all the
stuff that View does, okay?

2065
01:33:59,210 --> 01:34:01,703
So, that's constraints
and gains in the struct.

2066
01:34:02,592 --> 01:34:04,950
We're gonna do the same thing
with this constrains and gains

2067
01:34:04,950 --> 01:34:06,140
with this struct.

2068
01:34:06,140 --> 01:34:09,719
We're gonna say constrains
and gains Identifiable.

2069
01:34:09,719 --> 01:34:14,719
Identifiable like View is
what's called a protocol

2070
01:34:15,070 --> 01:34:18,900
and that's the heart of this
constrains and gains business.

2071
01:34:18,900 --> 01:34:22,640
And again, we'll talk about
protocols a lot next week.

2072
01:34:22,640 --> 01:34:24,410
Unfortunately, you don't gain much with it

2073
01:34:24,410 --> 01:34:27,080
except where you gain the
ability to be identified

2074
01:34:27,080 --> 01:34:29,090
but mostly, you are constrained

2075
01:34:29,090 --> 01:34:31,010
and the constraint of Identifiable

2076
01:34:31,010 --> 01:34:34,540
is that you have to have a var called id

2077
01:34:34,540 --> 01:34:36,890
Now, luckily, it can be any type you want.

2078
01:34:36,890 --> 01:34:38,570
I'm gonna make my id be an Int

2079
01:34:38,570 --> 01:34:41,160
but it could be a String
or anything you need to do

2080
01:34:41,160 --> 01:34:43,390
to make this thing identifiable.

2081
01:34:43,390 --> 01:34:45,980
Of course, as soon as
I add another var here,

2082
01:34:45,980 --> 01:34:49,000
now, my Card isFaceUp blah, blah, blah

2083
01:34:49,000 --> 01:34:51,610
is not doing all the vars.

2084
01:34:51,610 --> 01:34:55,420
So for both of these, I need to add an ID.

2085
01:34:55,420 --> 01:34:59,500
And what I'm gonna use for my
ID is my pairIndex times two

2086
01:34:59,500 --> 01:35:01,760
and for this guy's ID
because I want this Card

2087
01:35:01,760 --> 01:35:05,270
to be obviously, to
have its own identifier,

2088
01:35:05,270 --> 01:35:09,930
I'm gonna do pairIndex
times two plus one, okay?

2089
01:35:09,930 --> 01:35:14,760
So now these things
have unique identifiers.

2090
01:35:14,760 --> 01:35:17,440
Now this is fully identifiable,
that's all we need to do,

2091
01:35:17,440 --> 01:35:19,340
we just have to make sure that these Cards

2092
01:35:19,340 --> 01:35:21,060
are uniquely identifiable,

2093
01:35:21,060 --> 01:35:22,290
again, so that they move around,

2094
01:35:22,290 --> 01:35:23,803
we can animate them or whatever.

2095
01:35:23,803 --> 01:35:26,290
By the way, it's a little annoying here

2096
01:35:26,290 --> 01:35:29,360
that I have to say this
every time for a new Card.

2097
01:35:29,360 --> 01:35:31,660
I could just put that
down here, by the way.

2098
01:35:31,660 --> 01:35:35,930
You're absolutely allowed
to have some of your vars

2099
01:35:35,930 --> 01:35:37,760
be initialized that way

2100
01:35:37,760 --> 01:35:41,160
and then we don't need
to have them here, okay?

2101
01:35:41,160 --> 01:35:43,423
That cleans up our code
a little bit there.

2102
01:35:45,170 --> 01:35:47,140
Okay, so now that this is Identifiable,

2103
01:35:47,140 --> 01:35:49,330
when we go back to our View over here,

2104
01:35:49,330 --> 01:35:50,900
it says, oh, that's fine, okay,

2105
01:35:50,900 --> 01:35:55,250
you've got an iteratable thing
of Identifiables all as well.

2106
01:35:55,250 --> 01:35:58,280
Of course, this is no longer
the index in the range, okay?

2107
01:35:58,280 --> 01:36:02,493
This argument is the Card
that's in the Array, okay?

2108
01:36:03,760 --> 01:36:07,740
And of course, you know that
this is an inline function

2109
01:36:07,740 --> 01:36:09,560
and this is the argument to it

2110
01:36:09,560 --> 01:36:12,480
and it's just ForEaching
through these cards

2111
01:36:12,480 --> 01:36:14,770
in this Array and so this is each Card

2112
01:36:14,770 --> 01:36:17,183
and that's what we're
gonna pass right here.

2113
01:36:18,790 --> 01:36:19,990
And that's it.

2114
01:36:19,990 --> 01:36:24,970
So this is how we attach
our Model to our View

2115
01:36:24,970 --> 01:36:27,490
through our ViewModel, okay?

2116
01:36:27,490 --> 01:36:31,760
So our ViewModel provided
essentially a window or a portal

2117
01:36:31,760 --> 01:36:34,290
on to our Model through this Cards Array

2118
01:36:34,290 --> 01:36:36,800
and through choose card
which we haven't used yet

2119
01:36:36,800 --> 01:36:37,750
but we're going to.

2120
01:36:38,840 --> 01:36:41,827
For us to see our Model over here

2121
01:36:41,827 --> 01:36:45,930
and our View is just always
going to reflect that.

2122
01:36:45,930 --> 01:36:48,000
Now, we're gonna run out of time today

2123
01:36:48,000 --> 01:36:50,360
to show you how it does
the auto-reflection,

2124
01:36:50,360 --> 01:36:53,815
we're gonna do that first
thing next week's lecture.

2125
01:36:53,815 --> 01:36:56,450
But that's a key part
of making all his work

2126
01:36:56,450 --> 01:36:58,370
but at least we're gonna
be able to see here

2127
01:36:58,370 --> 01:37:00,960
that this View is always drawing

2128
01:37:00,960 --> 01:37:02,820
whatever is in the Model, okay?

2129
01:37:02,820 --> 01:37:05,160
Get it through the ViewModel
but whatever it gets,

2130
01:37:05,160 --> 01:37:07,090
it's always drawing that here.

2131
01:37:07,090 --> 01:37:08,420
And we're gonna see that in action.

2132
01:37:08,420 --> 01:37:10,473
Let's go ahead and we'll run our app.

2133
01:37:15,991 --> 01:37:16,824
And here it is.

2134
01:37:16,824 --> 01:37:19,540
And we've got four face-down cards.

2135
01:37:19,540 --> 01:37:21,410
Why do we have four face-down cards?

2136
01:37:21,410 --> 01:37:24,470
Well, because here, when
we created our MemoryGame,

2137
01:37:24,470 --> 01:37:27,080
we said we wanted two pairs of Cards

2138
01:37:27,080 --> 01:37:29,740
so that exactly why we got
four Cards, it's two pairs

2139
01:37:29,740 --> 01:37:31,620
and over here in MemoryGame,

2140
01:37:31,620 --> 01:37:34,360
we have all our Cards start facedown.

2141
01:37:34,360 --> 01:37:37,730
So let's change this in
our Model to be true, okay?

2142
01:37:37,730 --> 01:37:41,330
All Cards are now created
in our Model faceUp true.

2143
01:37:41,330 --> 01:37:44,000
Let's see if that affects our View.

2144
01:37:44,000 --> 01:37:46,310
Whoa, it did and even, look,

2145
01:37:46,310 --> 01:37:49,970
there's the two kinds of
things that we put on there.

2146
01:37:49,970 --> 01:37:51,510
See that?

2147
01:37:51,510 --> 01:37:52,400
Okay?

2148
01:37:52,400 --> 01:37:56,523
Now, we could, let's say
put another one in here.

2149
01:37:58,660 --> 01:38:00,166
Over here.

2150
01:38:00,166 --> 01:38:01,870
What's a good Halloween thing?

2151
01:38:01,870 --> 01:38:03,910
How about spider?

2152
01:38:03,910 --> 01:38:05,283
Yeah, spider.

2153
01:38:06,347 --> 01:38:08,920
Maybe a spider, by the way,
we have two Cards here.

2154
01:38:08,920 --> 01:38:10,920
We could say three now that we have three

2155
01:38:10,920 --> 01:38:15,390
but another cool thing to
say is emojis.count, right?

2156
01:38:15,390 --> 01:38:18,000
Because emojis is this Array.

2157
01:38:18,000 --> 01:38:20,000
Of course, I don't need this, by the way,

2158
01:38:20,000 --> 01:38:21,990
can infer that as well.

2159
01:38:21,990 --> 01:38:26,126
So, this emojis.count, this
is just a var in emojis,

2160
01:38:26,126 --> 01:38:28,170
in Array, rather, that
is going to tell you

2161
01:38:28,170 --> 01:38:29,810
how many things are in here.

2162
01:38:29,810 --> 01:38:30,743
We run again.

2163
01:38:32,750 --> 01:38:33,583
And we got it.

2164
01:38:35,130 --> 01:38:39,040
Okay, so, our View is very nicely

2165
01:38:39,040 --> 01:38:43,440
always reflecting whatever
it sees in our Model.

2166
01:38:43,440 --> 01:38:44,350
That's great.

2167
01:38:44,350 --> 01:38:48,150
What about this ability
to express an Intent?

2168
01:38:48,150 --> 01:38:50,273
Like I wanna choose a card, okay?

2169
01:38:50,273 --> 01:38:54,670
I wanna be able to go
here and tap on a card

2170
01:38:54,670 --> 01:38:58,360
and have it be chosen for
the purposes of the game.

2171
01:38:58,360 --> 01:39:00,470
So, that's also very easy to do

2172
01:39:00,470 --> 01:39:02,228
because we have this ViewModel.

2173
01:39:02,228 --> 01:39:06,120
For every Card, I'm just
gonna add a little thing on it

2174
01:39:06,120 --> 01:39:07,707
called onTapGesture.

2175
01:39:08,602 --> 01:39:11,600
So, onTapGesture is a function

2176
01:39:11,600 --> 01:39:14,640
that takes another
function as an argument.

2177
01:39:14,640 --> 01:39:16,960
The function it takes takes no arguments

2178
01:39:16,960 --> 01:39:19,530
and it returns nothing, okay?

2179
01:39:19,530 --> 01:39:21,560
So, this is the function we're gonna put.

2180
01:39:21,560 --> 01:39:23,560
So, here is a function
that takes no arguments

2181
01:39:23,560 --> 01:39:25,357
and returns nothing right here.

2182
01:39:25,357 --> 01:39:28,850
And what I wanna do in
here is ask my ViewModel

2183
01:39:28,850 --> 01:39:31,290
to do something, an Intent,

2184
01:39:31,290 --> 01:39:35,570
which is to choose this Card, okay?

2185
01:39:35,570 --> 01:39:39,010
That's this Card right here,
I'm going to choose this Card.

2186
01:39:39,010 --> 01:39:43,740
So onTapGesture perform
is just something in View,

2187
01:39:43,740 --> 01:39:46,913
all Views know how to do
this onTapGesture perform.

2188
01:39:49,354 --> 01:39:51,500
This is the only argument
and thus, the last argument

2189
01:39:51,500 --> 01:39:54,290
so we don't need that on here.

2190
01:39:54,290 --> 01:39:56,420
A lot of times, if we
have something like this,

2191
01:39:56,420 --> 01:39:58,880
we're going to make it
a little more readable

2192
01:39:58,880 --> 01:40:03,355
by putting this little
embedded function here

2193
01:40:03,355 --> 01:40:06,630
on its own line like this.

2194
01:40:06,630 --> 01:40:09,700
And you can also see that
we have an error here.

2195
01:40:09,700 --> 01:40:13,490
Now, this is a very interesting
error because probably,

2196
01:40:13,490 --> 01:40:15,060
in about a month and a half,

2197
01:40:15,060 --> 01:40:17,650
this error will no longer appear, okay?

2198
01:40:17,650 --> 01:40:20,650
This has been fixed or changed,

2199
01:40:20,650 --> 01:40:23,291
however you wanna describe it, in SwiftUI.

2200
01:40:23,291 --> 01:40:25,900
Swift, all changes to Swift

2201
01:40:25,900 --> 01:40:27,940
go through a public review process

2202
01:40:27,940 --> 01:40:30,240
and this has gone through
this and been approved

2203
01:40:30,240 --> 01:40:31,510
so it will happen.

2204
01:40:31,510 --> 01:40:35,260
And essentially, what's
going on here is sometimes,

2205
01:40:35,260 --> 01:40:37,060
when you have these inline functions,

2206
01:40:37,060 --> 01:40:40,670
you need to put self. in front

2207
01:40:40,670 --> 01:40:43,910
so that Swift knows exactly
what's going on, okay?

2208
01:40:43,910 --> 01:40:45,840
And I'm not gonna explain in detail today

2209
01:40:45,840 --> 01:40:47,720
because we're out of time.

2210
01:40:47,720 --> 01:40:50,260
What I mean by that,
will explain it next week

2211
01:40:50,260 --> 01:40:51,322
or the week after.

2212
01:40:51,322 --> 01:40:53,430
But that's what this
error is saying right here

2213
01:40:53,430 --> 01:40:54,350
is to put the self.

2214
01:40:54,350 --> 01:40:57,780
Now, I recommend any
time you see this error,

2215
01:40:57,780 --> 01:41:00,570
any time you see the words
requires explicit self

2216
01:41:00,570 --> 01:41:03,490
to make capture semantics
explicit, insert self,

2217
01:41:03,490 --> 01:41:06,680
just choose to fix it, okay?

2218
01:41:06,680 --> 01:41:08,760
And then that'll put self in front.

2219
01:41:08,760 --> 01:41:12,260
I mean you could put self
in front of any var, okay?

2220
01:41:12,260 --> 01:41:13,960
At any time.

2221
01:41:13,960 --> 01:41:16,060
It never hurts to put self in front.

2222
01:41:16,060 --> 01:41:18,150
Some people have kind of taken a strategy

2223
01:41:18,150 --> 01:41:20,480
of I'm just gonna put self.
in front of every single var

2224
01:41:20,480 --> 01:41:22,200
and then I'll never have this problem

2225
01:41:22,200 --> 01:41:23,775
where I have to do that fix it.

2226
01:41:23,775 --> 01:41:26,730
Given that in a couple months, this self.

2227
01:41:26,730 --> 01:41:29,440
is not actually going to
be required here anymore.

2228
01:41:29,440 --> 01:41:32,860
I'm not sure what the
right strategy there is

2229
01:41:32,860 --> 01:41:36,450
but in this class, if you
see that explicit semantics

2230
01:41:36,450 --> 01:41:40,270
insert self thing, just do the
fix it and put self in front

2231
01:41:40,270 --> 01:41:41,570
and all of you well there.

2232
01:41:42,770 --> 01:41:44,523
Okay, so let's see if this works.

2233
01:41:46,460 --> 01:41:48,527
Okay, when we click on these Cards

2234
01:41:48,527 --> 01:41:49,360
and this tap gesture happens,

2235
01:41:49,360 --> 01:41:52,090
we should get choose card
appearing on our console.

2236
01:41:52,090 --> 01:41:53,736
So let's try it, click.

2237
01:41:53,736 --> 01:41:55,890
Oh, look, there's something down there.

2238
01:41:55,890 --> 01:41:56,723
there it is.

2239
01:41:56,723 --> 01:41:58,240
This is our debugger over here.

2240
01:41:58,240 --> 01:42:00,130
This is our console.

2241
01:42:00,130 --> 01:42:03,060
We can actually use these
buttons to hide the debugger

2242
01:42:03,060 --> 01:42:06,540
so we're only seeing the console,

2243
01:42:06,540 --> 01:42:07,410
get this back over here.

2244
01:42:07,410 --> 01:42:09,320
And hopefully, when we
click on different cards,

2245
01:42:09,320 --> 01:42:11,130
yeah, we're getting different things.

2246
01:42:11,130 --> 01:42:13,220
So this output card chosen

2247
01:42:13,220 --> 01:42:16,280
is coming from this
line of code right here.

2248
01:42:16,280 --> 01:42:18,440
This is in our Model.

2249
01:42:18,440 --> 01:42:21,850
So our View was able to
invoke code in our Model

2250
01:42:21,850 --> 01:42:26,550
by simply executing the Intent
function in our ViewModel.

2251
01:42:26,550 --> 01:42:29,327
So that's how communication
between the View

2252
01:42:29,327 --> 01:42:33,830
and the Model happens when some
gesture happens in the View.

2253
01:42:33,830 --> 01:42:38,240
You can see that it's
basically turning our Card

2254
01:42:38,240 --> 01:42:41,800
into a String by telling us
everything about the card, okay?

2255
01:42:41,800 --> 01:42:44,300
All the value of all of its vars.

2256
01:42:44,300 --> 01:42:45,910
I told you this was a cool feature

2257
01:42:45,910 --> 01:42:49,783
and it is really good for debugging, okay?

2258
01:42:51,270 --> 01:42:54,570
All right, so we're out of
time for this week's lecture.

2259
01:42:54,570 --> 01:42:57,280
Your homework is to clean
this up a little bit.

2260
01:42:57,280 --> 01:43:00,070
For example, notice these
cards are not shuffled

2261
01:43:00,070 --> 01:43:02,430
so it's really easy to
play this game, right?

2262
01:43:02,430 --> 01:43:03,730
'Cause the cards are
all next to each other

2263
01:43:03,730 --> 01:43:04,760
so you're gonna shuffle these cards,

2264
01:43:04,760 --> 01:43:08,080
you're gonna make them stop
being tall and skinny like this

2265
01:43:08,080 --> 01:43:11,730
and you're also going to
put a random number of cards

2266
01:43:11,730 --> 01:43:14,210
in here from like two pairs up to,

2267
01:43:14,210 --> 01:43:15,660
I think, I did five or six pairs,

2268
01:43:15,660 --> 01:43:17,380
whatever says in the homework assignment.

2269
01:43:17,380 --> 01:43:19,040
So every time, it's gonna have
a different number of cards

2270
01:43:19,040 --> 01:43:21,633
and they'll all be shuffled.

2271
01:43:22,500 --> 01:43:23,370
And that's your homework.

2272
01:43:23,370 --> 01:43:26,670
So you can see that most your
homework is just to reproduce

2273
01:43:26,670 --> 01:43:28,711
what I've done here to
get it to this point.

2274
01:43:28,711 --> 01:43:31,470
The changes that I mentioned,

2275
01:43:31,470 --> 01:43:33,330
most of them are one line of code

2276
01:43:33,330 --> 01:43:34,960
so it shouldn't be a lot
of work for you there

2277
01:43:34,960 --> 01:43:37,790
but it's one line of code
but it means understanding

2278
01:43:37,790 --> 01:43:39,400
what's going on here.

2279
01:43:39,400 --> 01:43:40,630
Okay, that's it for this week.

2280
01:43:40,630 --> 01:43:43,440
Enjoy your homework if you
have any questions about it,

2281
01:43:43,440 --> 01:43:44,860
you know to go to Piazza

2282
01:43:44,860 --> 01:43:47,260
and we'll be right there
to answer them for you.

2283
01:43:48,470 --> 01:43:51,693
>> [旁白] 请访问 stanford.edu
获取更多内容
